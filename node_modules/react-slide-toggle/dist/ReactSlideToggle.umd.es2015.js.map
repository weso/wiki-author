{"version":3,"file":"ReactSlideToggle.umd.es2015.js","sources":["../src/library/SlideToggle.js"],"sourcesContent":["/*\r\n  _state_ is internal state for sync and rendering control.\r\n  setState is async and I need sync control because timing is important\r\n  and because I need to control what is to be re-rendered.\r\n*/\r\n\r\nimport React from 'react';\r\n//import PropTypes from 'prop-types';\r\n\r\n// Support browser or node env\r\nconst root = typeof window !== 'undefined' ? window : global;\r\nconst rAF = root.requestAnimationFrame\r\n  ? root.requestAnimationFrame.bind(root)\r\n  : callback => root.setTimeout(callback, 16);\r\nconst cAF = root.cancelAnimationFrame\r\n  ? root.cancelAnimationFrame.bind(root)\r\n  : root.clearInterval.bind(root);\r\n\r\nconst TOGGLE = Object.freeze({\r\n  EXPANDED: 'EXPANDED',\r\n  COLLAPSED: 'COLLAPSED',\r\n  EXPANDING: 'EXPANDING',\r\n  COLLAPSING: 'COLLAPSING',\r\n});\r\n\r\nconst easeInOutCubic = t =>\r\n  t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;\r\n\r\nconst util = {\r\n  isMoving: toggleState =>\r\n    toggleState === TOGGLE.EXPANDING || toggleState === TOGGLE.COLLAPSING,\r\n  clamp: ({ value, max = 1, min = 0 }) => {\r\n    if (value > max) return max;\r\n    if (value < min) return min;\r\n    return value;\r\n  },\r\n  now: () => Date.now(),\r\n  sanitizeDuration: duration => Math.max(0, parseInt(+duration, 10) || 0),\r\n  interpolate: ({ next, prev }) => {\r\n    /*\r\n      If the diff in the next rAF is big, it can seem jumpy when reversing the toggling\r\n      This is heuristic approach to minimize the diff value by interpolating.\r\n    */\r\n    const diff = Math.abs(next - prev);\r\n    let interpolated = next;\r\n    if (diff > 0.15) {\r\n      /* heuristic value */\r\n      if (next > prev) interpolated -= diff * 0.75;\r\n      /* heuristic value */ else\r\n        interpolated += diff * 0.75; /* heuristic value */\r\n    }\r\n    return interpolated;\r\n  },\r\n};\r\n\r\nexport default class SlideToggle extends React.Component {\r\n  static defaultProps = {\r\n    duration: 300,\r\n    easeCollapse: easeInOutCubic,\r\n    easeExpand: easeInOutCubic,\r\n  };\r\n\r\n  // Internal state\r\n  _state_ = {\r\n    collapsibleElement: null,\r\n    toggleState: this.props.collapsed ? TOGGLE.COLLAPSED : TOGGLE.EXPANDED,\r\n  };\r\n\r\n  GET_HEIGHT = this.props.offsetHeight ? 'offsetHeight' : 'scrollHeight';\r\n\r\n  // React state\r\n  state = {\r\n    toggleState: this._state_.toggleState,\r\n    hasReversed: false,\r\n    range: this.props.collapsed ? 0 : 1,\r\n    progress: this.props.collapsed ? 0 : 1,\r\n  };\r\n\r\n  render() {\r\n    const data = {\r\n      onToggle: this.toggle, // deprecated\r\n      toggle: this.toggle,\r\n      setCollapsibleElement: this.setCollapsibleElement,\r\n      toggleState: this.state.toggleState,\r\n      hasReversed: this.state.hasReversed,\r\n      isMoving: util.isMoving(this.state.toggleState),\r\n      range: this.state.range,\r\n      progress: this.state.progress,\r\n    };\r\n\r\n    if (typeof this.props.children === 'function')\r\n      return this.props.children(data);\r\n    if (this.props.render) return this.props.render(data);\r\n\r\n    return this.props.children;\r\n  }\r\n\r\n  getCollapsible = () => this._state_.collapsibleElement;\r\n\r\n  updateCollapsible = (attr, value) => {\r\n    if (this.getCollapsible()) {\r\n      this._state_.collapsibleElement.style[attr] = value;\r\n    }\r\n  };\r\n\r\n  setCollapsibleElement = element => {\r\n    this._state_.collapsibleElement = element;\r\n    if (this._state_.collapsibleElement && !this.props.noOverflowHidden) {\r\n      this._state_.collapsibleElement.style.overflow = 'hidden';\r\n    }\r\n    if (this._state_.toggleState === TOGGLE.COLLAPSED) {\r\n      this.setCollapsedState({ initialState: true });\r\n    }\r\n  };\r\n\r\n  toggle = () => {\r\n    if (this.props.irreversible && util.isMoving(this._state_.toggleState)) {\r\n      return;\r\n    }\r\n\r\n    const invokeCollapsing = () => {\r\n      this.props.onCollapsing &&\r\n        this.props.onCollapsing({\r\n          range: this.state.range,\r\n          progress: this.state.progress,\r\n          hasReversed: this.state.hasReversed,\r\n        });\r\n\r\n      this.collapse();\r\n    };\r\n    const invokeExpanding = () => {\r\n      this.props.onExpanding &&\r\n        this.props.onExpanding({\r\n          range: this.state.range,\r\n          progress: this.state.progress,\r\n          hasReversed: this.state.hasReversed,\r\n        });\r\n\r\n      this.expand();\r\n    };\r\n\r\n    const updateInternalState = ({ toggleState, display, hasReversed }) => {\r\n      this._state_.toggleState = toggleState;\r\n      this._state_.hasReversed = !!hasReversed;\r\n\r\n      if (display !== undefined && !this.props.noDisplayStyle) {\r\n        this.updateCollapsible('display', display);\r\n      }\r\n\r\n      const now = util.now();\r\n\r\n      if (hasReversed) {\r\n        const { startTime } = this._state_;\r\n        const duration = util.sanitizeDuration(this.props.duration);\r\n        const elapsedTime = Math.min(duration, now - startTime);\r\n        const subtract = Math.max(0, duration - elapsedTime);\r\n        this._state_.startTime = now - subtract;\r\n      } else {\r\n        const collapsible = this.getCollapsible();\r\n        if (collapsible && collapsible.style.height) {\r\n          this.updateCollapsible('height', null);\r\n        }\r\n        this._state_.boxHeight = collapsible ? collapsible[this.GET_HEIGHT] : 0;\r\n        this._state_.startTime = now;\r\n        this._state_.startDirection = toggleState;\r\n      }\r\n\r\n      this.setState({\r\n        toggleState: this._state_.toggleState,\r\n        hasReversed: this._state_.hasReversed,\r\n      });\r\n    };\r\n\r\n    switch (this._state_.toggleState) {\r\n      case TOGGLE.EXPANDED:\r\n        updateInternalState({ toggleState: TOGGLE.COLLAPSING });\r\n        invokeCollapsing();\r\n        break;\r\n      case TOGGLE.COLLAPSED:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.EXPANDING,\r\n          display: '',\r\n        });\r\n        invokeExpanding();\r\n        break;\r\n      case TOGGLE.EXPANDING:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.COLLAPSING,\r\n          hasReversed: true,\r\n        });\r\n        invokeCollapsing();\r\n        break;\r\n      case TOGGLE.COLLAPSING:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.EXPANDING,\r\n          display: '',\r\n          hasReversed: true,\r\n        });\r\n        invokeExpanding();\r\n        break;\r\n    }\r\n  };\r\n\r\n  setExpandedState = () => {\r\n    this._state_.progress = 1;\r\n    this._state_.toggleState = TOGGLE.EXPANDED;\r\n    this.updateCollapsible('height', null);\r\n    this.setState({\r\n      toggleState: TOGGLE.EXPANDED,\r\n      range: 1,\r\n      progress: this._state_.progress,\r\n    });\r\n    if (this.props.onExpanded) {\r\n      this.props.onExpanded({\r\n        hasReversed: this.state.hasReversed,\r\n      });\r\n    }\r\n  };\r\n\r\n  expand = () => {\r\n    if (this._state_.toggleState !== TOGGLE.EXPANDING) {\r\n      return;\r\n    }\r\n\r\n    const duration = util.sanitizeDuration(this.props.duration);\r\n    if (duration <= 0) {\r\n      this.setExpandedState();\r\n      return;\r\n    }\r\n\r\n    const { startTime } = this._state_;\r\n    const elapsedTime = Math.min(duration, util.now() - startTime);\r\n\r\n    if (elapsedTime >= duration) {\r\n      this.setExpandedState();\r\n    } else {\r\n      const { startDirection, toggleState, boxHeight } = this._state_;\r\n      const range = util.clamp({ value: elapsedTime / duration });\r\n\r\n      let progress;\r\n      if (\r\n        this.props.whenReversedUseBackwardEase &&\r\n        startDirection !== toggleState\r\n      ) {\r\n        progress = 1 - this.props.easeCollapse(1 - range);\r\n      } else {\r\n        progress = this.props.easeExpand(range);\r\n      }\r\n\r\n      if (!this.props.bestPerformance) {\r\n        this.setState({\r\n          range,\r\n          progress,\r\n        });\r\n      }\r\n\r\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\r\n        progress = util.interpolate({\r\n          next: progress,\r\n          prev: this._state_.progress,\r\n        });\r\n      }\r\n\r\n      const currentHeightValue = Math.round(boxHeight * progress);\r\n      this._state_.progress = progress;\r\n      this.updateCollapsible('height', `${currentHeightValue}px`);\r\n      this.nextTick(this.expand);\r\n    }\r\n  };\r\n\r\n  setCollapsedState = ({ initialState } = {}) => {\r\n    this._state_.progress = 0;\r\n    this._state_.toggleState = TOGGLE.COLLAPSED;\r\n\r\n    if (!this.props.noDisplayStyle) {\r\n      this.updateCollapsible('display', 'none');\r\n      this.updateCollapsible('height', null);\r\n    } else {\r\n      this.updateCollapsible('height', '0px');\r\n    }\r\n\r\n    this.setState({\r\n      toggleState: TOGGLE.COLLAPSED,\r\n      range: 0,\r\n      progress: this._state_.progress,\r\n    });\r\n    if (!initialState && this.props.onCollapsed)\r\n      this.props.onCollapsed({\r\n        hasReversed: this.state.hasReversed,\r\n      });\r\n  };\r\n\r\n  collapse = () => {\r\n    if (this._state_.toggleState !== TOGGLE.COLLAPSING) {\r\n      return;\r\n    }\r\n    const duration = util.sanitizeDuration(this.props.duration);\r\n    if (duration <= 0) {\r\n      this.setCollapsedState();\r\n      return;\r\n    }\r\n\r\n    const { startTime } = this._state_;\r\n    const elapsedTime = Math.min(duration, util.now() - startTime);\r\n\r\n    if (elapsedTime >= duration) {\r\n      this.setCollapsedState();\r\n    } else {\r\n      const { startDirection, boxHeight, toggleState } = this._state_;\r\n      const range = 1 - util.clamp({ value: elapsedTime / duration });\r\n\r\n      const {\r\n        whenReversedUseBackwardEase,\r\n        easeExpand,\r\n        easeCollapse,\r\n      } = this.props;\r\n\r\n      let progress;\r\n      if (whenReversedUseBackwardEase && startDirection !== toggleState) {\r\n        progress = easeExpand(range);\r\n      } else {\r\n        progress = 1 - easeCollapse(1 - range);\r\n      }\r\n\r\n      if (!this.props.bestPerformance) {\r\n        this.setState({\r\n          range,\r\n          progress,\r\n        });\r\n      }\r\n\r\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\r\n        progress = util.interpolate({\r\n          next: progress,\r\n          prev: this._state_.progress,\r\n        });\r\n      }\r\n\r\n      const currentHeightValue = Math.round(boxHeight * progress);\r\n      this._state_.progress = progress;\r\n      this._state_.timeout = this.nextTick(this.collapse);\r\n      this.updateCollapsible('height', `${currentHeightValue}px`);\r\n    }\r\n  };\r\n\r\n  nextTick = callback => {\r\n    this._state_.timeout = rAF(callback);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onMount &&\r\n      this.props.onMount({\r\n        toggleState: this.state.toggleState,\r\n        toggle: this.toggle,\r\n      });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.collapseEvent &&\r\n      this.props.collapseEvent > prevProps.collapseEvent\r\n    ) {\r\n      if (\r\n        this._state_.toggleState === TOGGLE.EXPANDED ||\r\n        this._state_.toggleState === TOGGLE.EXPANDING\r\n      ) {\r\n        this.toggle();\r\n      }\r\n    }\r\n    if (\r\n      this.props.expandEvent &&\r\n      this.props.expandEvent > prevProps.expandEvent\r\n    ) {\r\n      if (\r\n        this._state_.toggleState === TOGGLE.COLLAPSED ||\r\n        this._state_.toggleState === TOGGLE.COLLAPSING\r\n      ) {\r\n        this.toggle();\r\n      }\r\n    }\r\n    if (\r\n      this.props.toggleEvent &&\r\n      this.props.toggleEvent > prevProps.toggleEvent\r\n    ) {\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onUnmount &&\r\n      this.props.onUnmount({\r\n        toggleState: this.state.toggleState,\r\n      });\r\n    this._state_.timeout && cAF(this._state_.timeout);\r\n  }\r\n}\r\n\r\n// SlideToggle.propTypes = {\r\n//   render: PropTypes.func,\r\n//     children: PropTypes.func,\r\n//     duration: PropTypes.number,\r\n//     irreversible: PropTypes.bool,\r\n//     whenReversedUseBackwardEase: PropTypes.bool,\r\n//     noDisplayStyle: PropTypes.bool,\r\n//     noOverflowHidden: PropTypes.bool,\r\n//     bestPerformance: PropTypes.bool,\r\n//     interpolateOnReverse: PropTypes.bool,\r\n//     easeCollapse: PropTypes.func,\r\n//     easeExpand: PropTypes.func,\r\n//     collapsed: PropTypes.bool,\r\n//     onExpanded: PropTypes.func,\r\n//     onExpanding: PropTypes.func,\r\n//     onCollapsed: PropTypes.func,\r\n//     onCollapsing: PropTypes.func,\r\n//     scrollHeight: PropTypes.bool,\r\n// }\r\n"],"names":["root","window","global","rAF","requestAnimationFrame","bind","callback","setTimeout","cAF","cancelAnimationFrame","clearInterval","TOGGLE","Object","freeze","EXPANDED","COLLAPSED","EXPANDING","COLLAPSING","easeInOutCubic","t","Math","pow","util","isMoving","toggleState","clamp","value","max","min","now","Date","sanitizeDuration","duration","parseInt","interpolate","next","prev","diff","abs","interpolated","SlideToggle","React","Component","collapsibleElement","this","props","collapsed","offsetHeight","_state_","hasReversed","range","progress","attr","getCollapsible","style","element","noOverflowHidden","overflow","setCollapsedState","initialState","irreversible","invokeCollapsing","onCollapsing","state","collapse","invokeExpanding","onExpanding","expand","updateInternalState","display","undefined","noDisplayStyle","updateCollapsible","startTime","elapsedTime","subtract","collapsible","height","boxHeight","GET_HEIGHT","startDirection","setState","onExpanded","setExpandedState","whenReversedUseBackwardEase","easeCollapse","easeExpand","bestPerformance","interpolateOnReverse","currentHeightValue","round","nextTick","onCollapsed","timeout","render","data","onToggle","toggle","setCollapsibleElement","children","componentDidMount","onMount","componentDidUpdate","prevProps","prevState","collapseEvent","expandEvent","toggleEvent","componentWillUnmount","onUnmount"],"mappings":"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"}