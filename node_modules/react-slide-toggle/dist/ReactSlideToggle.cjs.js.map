{"version":3,"file":"ReactSlideToggle.cjs.js","sources":["../src/library/SlideToggle.js"],"sourcesContent":["/*\r\n  _state_ is internal state for sync and rendering control.\r\n  setState is async and I need sync control because timing is important\r\n  and because I need to control what is to be re-rendered.\r\n*/\r\n\r\nimport React from 'react';\r\n//import PropTypes from 'prop-types';\r\n\r\n// Support browser or node env\r\nconst root = typeof window !== 'undefined' ? window : global;\r\nconst rAF = root.requestAnimationFrame\r\n  ? root.requestAnimationFrame.bind(root)\r\n  : callback => root.setTimeout(callback, 16);\r\nconst cAF = root.cancelAnimationFrame\r\n  ? root.cancelAnimationFrame.bind(root)\r\n  : root.clearInterval.bind(root);\r\n\r\nconst TOGGLE = Object.freeze({\r\n  EXPANDED: 'EXPANDED',\r\n  COLLAPSED: 'COLLAPSED',\r\n  EXPANDING: 'EXPANDING',\r\n  COLLAPSING: 'COLLAPSING',\r\n});\r\n\r\nconst easeInOutCubic = t =>\r\n  t < 0.5 ? 4 * t * t * t : 0.5 * Math.pow(2 * t - 2, 3) + 1;\r\n\r\nconst util = {\r\n  isMoving: toggleState =>\r\n    toggleState === TOGGLE.EXPANDING || toggleState === TOGGLE.COLLAPSING,\r\n  clamp: ({ value, max = 1, min = 0 }) => {\r\n    if (value > max) return max;\r\n    if (value < min) return min;\r\n    return value;\r\n  },\r\n  now: () => Date.now(),\r\n  sanitizeDuration: duration => Math.max(0, parseInt(+duration, 10) || 0),\r\n  interpolate: ({ next, prev }) => {\r\n    /*\r\n      If the diff in the next rAF is big, it can seem jumpy when reversing the toggling\r\n      This is heuristic approach to minimize the diff value by interpolating.\r\n    */\r\n    const diff = Math.abs(next - prev);\r\n    let interpolated = next;\r\n    if (diff > 0.15) {\r\n      /* heuristic value */\r\n      if (next > prev) interpolated -= diff * 0.75;\r\n      /* heuristic value */ else\r\n        interpolated += diff * 0.75; /* heuristic value */\r\n    }\r\n    return interpolated;\r\n  },\r\n};\r\n\r\nexport default class SlideToggle extends React.Component {\r\n  static defaultProps = {\r\n    duration: 300,\r\n    easeCollapse: easeInOutCubic,\r\n    easeExpand: easeInOutCubic,\r\n  };\r\n\r\n  // Internal state\r\n  _state_ = {\r\n    collapsibleElement: null,\r\n    toggleState: this.props.collapsed ? TOGGLE.COLLAPSED : TOGGLE.EXPANDED,\r\n  };\r\n\r\n  GET_HEIGHT = this.props.offsetHeight ? 'offsetHeight' : 'scrollHeight';\r\n\r\n  // React state\r\n  state = {\r\n    toggleState: this._state_.toggleState,\r\n    hasReversed: false,\r\n    range: this.props.collapsed ? 0 : 1,\r\n    progress: this.props.collapsed ? 0 : 1,\r\n  };\r\n\r\n  render() {\r\n    const data = {\r\n      onToggle: this.toggle, // deprecated\r\n      toggle: this.toggle,\r\n      setCollapsibleElement: this.setCollapsibleElement,\r\n      toggleState: this.state.toggleState,\r\n      hasReversed: this.state.hasReversed,\r\n      isMoving: util.isMoving(this.state.toggleState),\r\n      range: this.state.range,\r\n      progress: this.state.progress,\r\n    };\r\n\r\n    if (typeof this.props.children === 'function')\r\n      return this.props.children(data);\r\n    if (this.props.render) return this.props.render(data);\r\n\r\n    return this.props.children;\r\n  }\r\n\r\n  getCollapsible = () => this._state_.collapsibleElement;\r\n\r\n  updateCollapsible = (attr, value) => {\r\n    if (this.getCollapsible()) {\r\n      this._state_.collapsibleElement.style[attr] = value;\r\n    }\r\n  };\r\n\r\n  setCollapsibleElement = element => {\r\n    this._state_.collapsibleElement = element;\r\n    if (this._state_.collapsibleElement && !this.props.noOverflowHidden) {\r\n      this._state_.collapsibleElement.style.overflow = 'hidden';\r\n    }\r\n    if (this._state_.toggleState === TOGGLE.COLLAPSED) {\r\n      this.setCollapsedState({ initialState: true });\r\n    }\r\n  };\r\n\r\n  toggle = () => {\r\n    if (this.props.irreversible && util.isMoving(this._state_.toggleState)) {\r\n      return;\r\n    }\r\n\r\n    const invokeCollapsing = () => {\r\n      this.props.onCollapsing &&\r\n        this.props.onCollapsing({\r\n          range: this.state.range,\r\n          progress: this.state.progress,\r\n          hasReversed: this.state.hasReversed,\r\n        });\r\n\r\n      this.collapse();\r\n    };\r\n    const invokeExpanding = () => {\r\n      this.props.onExpanding &&\r\n        this.props.onExpanding({\r\n          range: this.state.range,\r\n          progress: this.state.progress,\r\n          hasReversed: this.state.hasReversed,\r\n        });\r\n\r\n      this.expand();\r\n    };\r\n\r\n    const updateInternalState = ({ toggleState, display, hasReversed }) => {\r\n      this._state_.toggleState = toggleState;\r\n      this._state_.hasReversed = !!hasReversed;\r\n\r\n      if (display !== undefined && !this.props.noDisplayStyle) {\r\n        this.updateCollapsible('display', display);\r\n      }\r\n\r\n      const now = util.now();\r\n\r\n      if (hasReversed) {\r\n        const { startTime } = this._state_;\r\n        const duration = util.sanitizeDuration(this.props.duration);\r\n        const elapsedTime = Math.min(duration, now - startTime);\r\n        const subtract = Math.max(0, duration - elapsedTime);\r\n        this._state_.startTime = now - subtract;\r\n      } else {\r\n        const collapsible = this.getCollapsible();\r\n        if (collapsible && collapsible.style.height) {\r\n          this.updateCollapsible('height', null);\r\n        }\r\n        this._state_.boxHeight = collapsible ? collapsible[this.GET_HEIGHT] : 0;\r\n        this._state_.startTime = now;\r\n        this._state_.startDirection = toggleState;\r\n      }\r\n\r\n      this.setState({\r\n        toggleState: this._state_.toggleState,\r\n        hasReversed: this._state_.hasReversed,\r\n      });\r\n    };\r\n\r\n    switch (this._state_.toggleState) {\r\n      case TOGGLE.EXPANDED:\r\n        updateInternalState({ toggleState: TOGGLE.COLLAPSING });\r\n        invokeCollapsing();\r\n        break;\r\n      case TOGGLE.COLLAPSED:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.EXPANDING,\r\n          display: '',\r\n        });\r\n        invokeExpanding();\r\n        break;\r\n      case TOGGLE.EXPANDING:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.COLLAPSING,\r\n          hasReversed: true,\r\n        });\r\n        invokeCollapsing();\r\n        break;\r\n      case TOGGLE.COLLAPSING:\r\n        updateInternalState({\r\n          toggleState: TOGGLE.EXPANDING,\r\n          display: '',\r\n          hasReversed: true,\r\n        });\r\n        invokeExpanding();\r\n        break;\r\n    }\r\n  };\r\n\r\n  setExpandedState = () => {\r\n    this._state_.progress = 1;\r\n    this._state_.toggleState = TOGGLE.EXPANDED;\r\n    this.updateCollapsible('height', null);\r\n    this.setState({\r\n      toggleState: TOGGLE.EXPANDED,\r\n      range: 1,\r\n      progress: this._state_.progress,\r\n    });\r\n    if (this.props.onExpanded) {\r\n      this.props.onExpanded({\r\n        hasReversed: this.state.hasReversed,\r\n      });\r\n    }\r\n  };\r\n\r\n  expand = () => {\r\n    if (this._state_.toggleState !== TOGGLE.EXPANDING) {\r\n      return;\r\n    }\r\n\r\n    const duration = util.sanitizeDuration(this.props.duration);\r\n    if (duration <= 0) {\r\n      this.setExpandedState();\r\n      return;\r\n    }\r\n\r\n    const { startTime } = this._state_;\r\n    const elapsedTime = Math.min(duration, util.now() - startTime);\r\n\r\n    if (elapsedTime >= duration) {\r\n      this.setExpandedState();\r\n    } else {\r\n      const { startDirection, toggleState, boxHeight } = this._state_;\r\n      const range = util.clamp({ value: elapsedTime / duration });\r\n\r\n      let progress;\r\n      if (\r\n        this.props.whenReversedUseBackwardEase &&\r\n        startDirection !== toggleState\r\n      ) {\r\n        progress = 1 - this.props.easeCollapse(1 - range);\r\n      } else {\r\n        progress = this.props.easeExpand(range);\r\n      }\r\n\r\n      if (!this.props.bestPerformance) {\r\n        this.setState({\r\n          range,\r\n          progress,\r\n        });\r\n      }\r\n\r\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\r\n        progress = util.interpolate({\r\n          next: progress,\r\n          prev: this._state_.progress,\r\n        });\r\n      }\r\n\r\n      const currentHeightValue = Math.round(boxHeight * progress);\r\n      this._state_.progress = progress;\r\n      this.updateCollapsible('height', `${currentHeightValue}px`);\r\n      this.nextTick(this.expand);\r\n    }\r\n  };\r\n\r\n  setCollapsedState = ({ initialState } = {}) => {\r\n    this._state_.progress = 0;\r\n    this._state_.toggleState = TOGGLE.COLLAPSED;\r\n\r\n    if (!this.props.noDisplayStyle) {\r\n      this.updateCollapsible('display', 'none');\r\n      this.updateCollapsible('height', null);\r\n    } else {\r\n      this.updateCollapsible('height', '0px');\r\n    }\r\n\r\n    this.setState({\r\n      toggleState: TOGGLE.COLLAPSED,\r\n      range: 0,\r\n      progress: this._state_.progress,\r\n    });\r\n    if (!initialState && this.props.onCollapsed)\r\n      this.props.onCollapsed({\r\n        hasReversed: this.state.hasReversed,\r\n      });\r\n  };\r\n\r\n  collapse = () => {\r\n    if (this._state_.toggleState !== TOGGLE.COLLAPSING) {\r\n      return;\r\n    }\r\n    const duration = util.sanitizeDuration(this.props.duration);\r\n    if (duration <= 0) {\r\n      this.setCollapsedState();\r\n      return;\r\n    }\r\n\r\n    const { startTime } = this._state_;\r\n    const elapsedTime = Math.min(duration, util.now() - startTime);\r\n\r\n    if (elapsedTime >= duration) {\r\n      this.setCollapsedState();\r\n    } else {\r\n      const { startDirection, boxHeight, toggleState } = this._state_;\r\n      const range = 1 - util.clamp({ value: elapsedTime / duration });\r\n\r\n      const {\r\n        whenReversedUseBackwardEase,\r\n        easeExpand,\r\n        easeCollapse,\r\n      } = this.props;\r\n\r\n      let progress;\r\n      if (whenReversedUseBackwardEase && startDirection !== toggleState) {\r\n        progress = easeExpand(range);\r\n      } else {\r\n        progress = 1 - easeCollapse(1 - range);\r\n      }\r\n\r\n      if (!this.props.bestPerformance) {\r\n        this.setState({\r\n          range,\r\n          progress,\r\n        });\r\n      }\r\n\r\n      if (this.props.interpolateOnReverse && this._state_.hasReversed) {\r\n        progress = util.interpolate({\r\n          next: progress,\r\n          prev: this._state_.progress,\r\n        });\r\n      }\r\n\r\n      const currentHeightValue = Math.round(boxHeight * progress);\r\n      this._state_.progress = progress;\r\n      this._state_.timeout = this.nextTick(this.collapse);\r\n      this.updateCollapsible('height', `${currentHeightValue}px`);\r\n    }\r\n  };\r\n\r\n  nextTick = callback => {\r\n    this._state_.timeout = rAF(callback);\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onMount &&\r\n      this.props.onMount({\r\n        toggleState: this.state.toggleState,\r\n        toggle: this.toggle,\r\n      });\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (\r\n      this.props.collapseEvent &&\r\n      this.props.collapseEvent > prevProps.collapseEvent\r\n    ) {\r\n      if (\r\n        this._state_.toggleState === TOGGLE.EXPANDED ||\r\n        this._state_.toggleState === TOGGLE.EXPANDING\r\n      ) {\r\n        this.toggle();\r\n      }\r\n    }\r\n    if (\r\n      this.props.expandEvent &&\r\n      this.props.expandEvent > prevProps.expandEvent\r\n    ) {\r\n      if (\r\n        this._state_.toggleState === TOGGLE.COLLAPSED ||\r\n        this._state_.toggleState === TOGGLE.COLLAPSING\r\n      ) {\r\n        this.toggle();\r\n      }\r\n    }\r\n    if (\r\n      this.props.toggleEvent &&\r\n      this.props.toggleEvent > prevProps.toggleEvent\r\n    ) {\r\n      this.toggle();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.props.onUnmount &&\r\n      this.props.onUnmount({\r\n        toggleState: this.state.toggleState,\r\n      });\r\n    this._state_.timeout && cAF(this._state_.timeout);\r\n  }\r\n}\r\n\r\n// SlideToggle.propTypes = {\r\n//   render: PropTypes.func,\r\n//     children: PropTypes.func,\r\n//     duration: PropTypes.number,\r\n//     irreversible: PropTypes.bool,\r\n//     whenReversedUseBackwardEase: PropTypes.bool,\r\n//     noDisplayStyle: PropTypes.bool,\r\n//     noOverflowHidden: PropTypes.bool,\r\n//     bestPerformance: PropTypes.bool,\r\n//     interpolateOnReverse: PropTypes.bool,\r\n//     easeCollapse: PropTypes.func,\r\n//     easeExpand: PropTypes.func,\r\n//     collapsed: PropTypes.bool,\r\n//     onExpanded: PropTypes.func,\r\n//     onExpanding: PropTypes.func,\r\n//     onCollapsed: PropTypes.func,\r\n//     onCollapsing: PropTypes.func,\r\n//     scrollHeight: PropTypes.bool,\r\n// }\r\n"],"names":["root","window","global","rAF","requestAnimationFrame","bind","callback","setTimeout","cAF","cancelAnimationFrame","clearInterval","TOGGLE","Object","freeze","EXPANDED","COLLAPSED","EXPANDING","COLLAPSING","easeInOutCubic","t","Math","pow","util","isMoving","toggleState","clamp","value","max","min","now","Date","sanitizeDuration","duration","parseInt","interpolate","next","prev","diff","abs","interpolated","SlideToggle","collapsibleElement","_this","props","collapsed","offsetHeight","_state_","hasReversed","range","progress","attr","getCollapsible","style","element","noOverflowHidden","overflow","setCollapsedState","initialState","irreversible","invokeCollapsing","onCollapsing","state","collapse","invokeExpanding","onExpanding","expand","updateInternalState","display","undefined","noDisplayStyle","updateCollapsible","startTime","elapsedTime","subtract","collapsible","height","boxHeight","GET_HEIGHT","startDirection","setState","onExpanded","setExpandedState","whenReversedUseBackwardEase","easeCollapse","easeExpand","bestPerformance","interpolateOnReverse","currentHeightValue","round","nextTick","onCollapsed","timeout","React","Component","data","onToggle","this","toggle","setCollapsibleElement","children","render","onMount","prevProps","prevState","collapseEvent","expandEvent","toggleEvent","onUnmount"],"mappings":"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"}