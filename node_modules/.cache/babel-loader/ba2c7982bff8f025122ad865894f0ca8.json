{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\n/* eslint-disable react/no-unused-prop-types */\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { Popper } from 'react-popper';\nimport { values } from '../utils';\nimport { ALIGN } from '../constants'; // `Element` is not defined during server-side rendering, so shim it here.\n\n/* istanbul ignore next */\n\nvar SafeElement = typeof Element === 'undefined' ? function () {} : Element;\nvar propTypes = {\n  /**\n   * Specify menu alignment. The default value is `justify`, which makes the\n   * menu as wide as the input and truncates long values. Specifying `left`\n   * or `right` will align the menu to that side and the width will be\n   * determined by the length of menu item values.\n   */\n  align: PropTypes.oneOf(values(ALIGN)),\n  children: PropTypes.func.isRequired,\n\n  /**\n   * Specify whether the menu should appear above the input.\n   */\n  dropup: PropTypes.bool,\n\n  /**\n   * Whether or not to automatically adjust the position of the menu when it\n   * reaches the viewport boundaries.\n   */\n  flip: PropTypes.bool,\n  isMenuShown: PropTypes.bool,\n  positionFixed: PropTypes.bool,\n  referenceElement: PropTypes.instanceOf(SafeElement)\n};\nvar defaultProps = {\n  align: ALIGN.JUSTIFY,\n  dropup: false,\n  flip: false,\n  isMenuShown: false,\n  positionFixed: false\n};\n\nfunction getModifiers(_ref) {\n  var align = _ref.align,\n      flip = _ref.flip;\n  return {\n    computeStyles: {\n      enabled: true,\n      fn: function fn(_ref2) {\n        var styles = _ref2.styles,\n            data = _objectWithoutPropertiesLoose(_ref2, [\"styles\"]);\n\n        return _extends({}, data, {\n          styles: _extends({}, styles, {\n            // Use the following condition instead of `align === 'justify'`\n            // since it allows the component to fall back to justifying the\n            // menu width if `align` is undefined.\n            width: align !== ALIGN.RIGHT && align !== ALIGN.LEFT ? // Set the popper width to match the target width.\n            data.offsets.reference.width : styles.width\n          })\n        });\n      }\n    },\n    flip: {\n      enabled: flip\n    },\n    preventOverflow: {\n      escapeWithReference: true\n    }\n  };\n} // Flow expects a string literal value for `placement`.\n\n\nvar PLACEMENT = {\n  bottom: {\n    end: 'bottom-end',\n    start: 'bottom-start'\n  },\n  top: {\n    end: 'top-end',\n    start: 'top-start'\n  }\n};\nexport function getPlacement(_ref3) {\n  var align = _ref3.align,\n      dropup = _ref3.dropup;\n  var x = align === ALIGN.RIGHT ? 'end' : 'start';\n  var y = dropup ? 'top' : 'bottom';\n  return PLACEMENT[y][x];\n}\n\nvar Overlay = function Overlay(props) {\n  var children = props.children,\n      isMenuShown = props.isMenuShown,\n      positionFixed = props.positionFixed,\n      referenceElement = props.referenceElement;\n\n  if (!isMenuShown) {\n    return null;\n  }\n\n  return (\n    /*#__PURE__*/\n    React.createElement(Popper, {\n      modifiers: getModifiers(props),\n      placement: getPlacement(props),\n      positionFixed: positionFixed,\n      referenceElement: referenceElement\n    }, function (_ref4) {\n      var ref = _ref4.ref,\n          popperProps = _objectWithoutPropertiesLoose(_ref4, [\"ref\"]);\n\n      return children(_extends({}, popperProps, {\n        innerRef: ref,\n        inputHeight: referenceElement ? referenceElement.offsetHeight : 0\n      }));\n    })\n  );\n};\n\nOverlay.propTypes = propTypes;\nOverlay.defaultProps = defaultProps;\nexport default Overlay;","map":null,"metadata":{},"sourceType":"module"}