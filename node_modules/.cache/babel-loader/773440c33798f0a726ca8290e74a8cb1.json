{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport debounce from 'lodash.debounce';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef } from 'react';\nimport Typeahead from '../core/Typeahead';\nimport { optionType } from '../propTypes';\nimport { getDisplayName, isFunction } from '../utils';\nvar propTypes = {\n  /**\n   * Delay, in milliseconds, before performing search.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * Whether or not a request is currently pending. Necessary for the\n   * container to know when new results are available.\n   */\n  isLoading: PropTypes.bool.isRequired,\n\n  /**\n   * Number of input characters that must be entered before showing results.\n   */\n  minLength: PropTypes.number,\n\n  /**\n   * Callback to perform when the search is executed.\n   */\n  onSearch: PropTypes.func.isRequired,\n\n  /**\n   * Options to be passed to the typeahead. Will typically be the query\n   * results, but can also be initial default options.\n   */\n  options: PropTypes.arrayOf(optionType),\n\n  /**\n   * Message displayed in the menu when there is no user input.\n   */\n  promptText: PropTypes.node,\n\n  /**\n   * Message displayed in the menu while the request is pending.\n   */\n  searchText: PropTypes.node,\n\n  /**\n   * Whether or not the component should cache query results.\n   */\n  useCache: PropTypes.bool\n};\nvar defaultProps = {\n  delay: 200,\n  minLength: 2,\n  options: [],\n  promptText: 'Type to search...',\n  searchText: 'Searching...',\n  useCache: true\n};\n/**\n * HoC that encapsulates common behavior and functionality for doing\n * asynchronous searches, including:\n *\n *  - Debouncing user input\n *  - Optional query caching\n *  - Search prompt and empty results behaviors\n */\n\nvar asyncContainer = function asyncContainer(TypeaheadComponent) {\n  var AsyncTypeahead =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(AsyncTypeahead, _React$Component);\n\n    function AsyncTypeahead() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n      _defineProperty(_assertThisInitialized(_this), \"_cache\", {});\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleSearchDebounced\", void 0);\n\n      _defineProperty(_assertThisInitialized(_this), \"_query\", _this.props.defaultInputValue || '');\n\n      _defineProperty(_assertThisInitialized(_this), \"_getEmptyLabel\", function () {\n        var _this$props = _this.props,\n            emptyLabel = _this$props.emptyLabel,\n            isLoading = _this$props.isLoading,\n            promptText = _this$props.promptText,\n            searchText = _this$props.searchText;\n\n        if (!_this._query.length) {\n          return promptText;\n        }\n\n        if (isLoading) {\n          return searchText;\n        }\n\n        return emptyLabel;\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleInputChange\", function (query, e) {\n        _this.props.onInputChange && _this.props.onInputChange(query, e);\n\n        _this._handleSearchDebounced(query);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleSearch\", function (query) {\n        _this._query = query;\n        var _this$props2 = _this.props,\n            minLength = _this$props2.minLength,\n            onSearch = _this$props2.onSearch,\n            useCache = _this$props2.useCache;\n\n        if (!query || minLength && query.length < minLength) {\n          return;\n        } // Use cached results, if applicable.\n\n\n        if (useCache && _this._cache[query]) {\n          // Re-render the component with the cached results.\n          _this.forceUpdate();\n\n          return;\n        } // Perform the search.\n\n\n        onSearch(query);\n      });\n\n      return _this;\n    }\n\n    var _proto = AsyncTypeahead.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._handleSearchDebounced = debounce(this._handleSearch, this.props.delay);\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n      var _this$props3 = this.props,\n          isLoading = _this$props3.isLoading,\n          options = _this$props3.options,\n          useCache = _this$props3.useCache; // Ensure that we've gone from a loading to a completed state. Otherwise\n      // an empty response could get cached if the component updates during the\n      // request (eg: if the parent re-renders for some reason).\n\n      if (!isLoading && prevProps.isLoading && useCache) {\n        this._cache[this._query] = options;\n      }\n    };\n\n    _proto.componentWillUnmount = function componentWillUnmount() {\n      this._cache = {};\n      this._query = '';\n      this._handleSearchDebounced && this._handleSearchDebounced.cancel();\n    };\n\n    _proto.render = function render() {\n      var _this$props4 = this.props,\n          allowNew = _this$props4.allowNew,\n          instanceRef = _this$props4.instanceRef,\n          isLoading = _this$props4.isLoading,\n          options = _this$props4.options,\n          useCache = _this$props4.useCache,\n          props = _objectWithoutPropertiesLoose(_this$props4, [\"allowNew\", \"instanceRef\", \"isLoading\", \"options\", \"useCache\"]);\n\n      var cachedQuery = this._cache[this._query];\n      return (\n        /*#__PURE__*/\n        React.createElement(TypeaheadComponent, _extends({}, props, {\n          allowNew: // Disable custom selections during a search unless\n          // `allowNew` is a function.\n          isFunction(allowNew) ? allowNew : allowNew && !isLoading,\n          emptyLabel: this._getEmptyLabel(),\n          isLoading: isLoading,\n          onInputChange: this._handleInputChange,\n          options: useCache && cachedQuery ? cachedQuery : options,\n          ref: instanceRef\n        }))\n      );\n    };\n\n    return AsyncTypeahead;\n  }(React.Component);\n\n  _defineProperty(AsyncTypeahead, \"displayName\", \"asyncContainer(\" + getDisplayName(Typeahead) + \")\");\n\n  _defineProperty(AsyncTypeahead, \"propTypes\", propTypes);\n\n  _defineProperty(AsyncTypeahead, \"defaultProps\", defaultProps);\n\n  return forwardRef(function (props, ref) {\n    return (\n      /*#__PURE__*/\n      React.createElement(AsyncTypeahead, _extends({}, props, {\n        instanceRef: ref\n      }))\n    );\n  });\n};\n\nexport default asyncContainer;","map":null,"metadata":{},"sourceType":"module"}