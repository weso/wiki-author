{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { Children } from 'react';\nimport { BaseMenuItem } from './MenuItem.react';\nimport { checkPropType, isRequiredForA11y } from '../propTypes';\n\nvar MenuDivider = function MenuDivider(props) {\n  return (\n    /*#__PURE__*/\n    React.createElement(\"li\", {\n      className: \"divider dropdown-divider\",\n      role: \"separator\"\n    })\n  );\n};\n\nvar MenuHeader = function MenuHeader(props) {\n  return (\n    /*#__PURE__*/\n    React.createElement(\"li\", _extends({}, props, {\n      className: \"dropdown-header\"\n    }))\n  );\n};\n\nvar propTypes = {\n  'aria-label': PropTypes.string,\n\n  /**\n   * Message to display in the menu if there are no valid results.\n   */\n  emptyLabel: PropTypes.node,\n\n  /**\n   * Needed for accessibility.\n   */\n  id: checkPropType(PropTypes.oneOfType([PropTypes.number, PropTypes.string]), isRequiredForA11y),\n\n  /**\n   * Maximum height of the dropdown menu.\n   */\n  maxHeight: PropTypes.string\n};\nvar defaultProps = {\n  'aria-label': 'menu-options',\n  emptyLabel: 'No matches found.',\n  maxHeight: '300px'\n};\n/**\n * Menu component that handles empty state when passed a set of results.\n */\n\nvar Menu =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Menu, _React$Component);\n\n  function Menu() {\n    return _React$Component.apply(this, arguments) || this;\n  }\n\n  var _proto = Menu.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props = this.props,\n        inputHeight = _this$props.inputHeight,\n        scheduleUpdate = _this$props.scheduleUpdate; // Update the menu position if the height of the input changes.\n\n    if (inputHeight !== prevProps.inputHeight) {\n      scheduleUpdate();\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props2 = this.props,\n        children = _this$props2.children,\n        className = _this$props2.className,\n        emptyLabel = _this$props2.emptyLabel,\n        id = _this$props2.id,\n        innerRef = _this$props2.innerRef,\n        maxHeight = _this$props2.maxHeight,\n        style = _this$props2.style,\n        text = _this$props2.text;\n    var contents = Children.count(children) === 0 ?\n    /*#__PURE__*/\n    React.createElement(BaseMenuItem, {\n      disabled: true,\n      role: \"option\"\n    }, emptyLabel) : children;\n    return (\n      /*#__PURE__*/\n      React.createElement(\"ul\", {\n        \"aria-label\": this.props['aria-label'],\n        className: cx('rbt-menu', 'dropdown-menu', 'show', className),\n        id: id,\n        key: // Force a re-render if the text changes to ensure that menu\n        // positioning updates correctly.\n        text,\n        ref: innerRef,\n        role: \"listbox\",\n        style: _extends({}, style, {\n          display: 'block',\n          maxHeight: maxHeight,\n          overflow: 'auto'\n        })\n      }, contents)\n    );\n  };\n\n  return Menu;\n}(React.Component);\n\n_defineProperty(Menu, \"propTypes\", propTypes);\n\n_defineProperty(Menu, \"defaultProps\", defaultProps);\n\n_defineProperty(Menu, \"Divider\", MenuDivider);\n\n_defineProperty(Menu, \"Header\", MenuHeader);\n\nexport default Menu;","map":null,"metadata":{},"sourceType":"module"}