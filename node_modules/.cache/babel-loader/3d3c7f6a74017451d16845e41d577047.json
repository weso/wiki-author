{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/wiki-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/config/TypeConfig.js\";\nimport React, { useState, useContext } from 'react';\nimport { AppContext } from '../../../../../../../App';\nimport Properties from '../../../../../../../conf/properties';\n\nfunction TypeConfig(props) {\n  const context = useContext(AppContext);\n  const entity = props.entity,\n        setPrefix = props.setPrefix,\n        collapsePrefix = props.collapsePrefix,\n        bnode = props.bnode;\n  const shapeStyles = Properties.getInstance().getShapeStyle();\n  const tripleStyles = Properties.getInstance().getTripleStyle();\n  const styles = entity.triples ? shapeStyles : tripleStyles; //is a Shape or a Triple?\n\n  const _useState = useState(entity.type.getTypeName()),\n        _useState2 = _slicedToArray(_useState, 2),\n        type = _useState2[0],\n        setType = _useState2[1];\n\n  const iri = '<...>';\n\n  const handleTypeChange = function (e) {\n    const type = e.target.value;\n    const value = entity.type.value;\n    entity.setType(type);\n    entity.type.value = value;\n    context.emit();\n    setType(type);\n    setPrefix('example');\n    collapsePrefix(e);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"xs-gridBox\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"customLabel\",\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"Type \"), React.createElement(\"select\", {\n    className: \"customSelector\",\n    value: type,\n    onChange: handleTypeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"iriRef\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, iri), React.createElement(\"option\", {\n    value: \"prefixedIri\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"QName\"), React.createElement(Bnode, {\n    isBnode: bnode,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  })));\n}\n\nfunction Bnode(props) {\n  const isBnode = props.isBnode;\n\n  if (isBnode) {\n    return React.createElement(\"option\", {\n      value: \"bnodeType\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"Bnode\");\n  }\n\n  return null;\n}\n\nexport default TypeConfig;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/config/TypeConfig.js"],"names":["React","useState","useContext","AppContext","Properties","TypeConfig","props","context","entity","setPrefix","collapsePrefix","bnode","shapeStyles","getInstance","getShapeStyle","tripleStyles","getTripleStyle","styles","triples","type","getTypeName","setType","iri","handleTypeChange","e","target","value","emit","label","Bnode","isBnode"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,UAAvB,QAAwC,OAAxC;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;;AAEA,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AAExB,QAAMC,OAAO,GAAGL,UAAU,CAACC,UAAD,CAA1B;AAFwB,QAGjBK,MAHiB,GAGwBF,KAHxB,CAGjBE,MAHiB;AAAA,QAGVC,SAHU,GAGwBH,KAHxB,CAGVG,SAHU;AAAA,QAGAC,cAHA,GAGwBJ,KAHxB,CAGAI,cAHA;AAAA,QAGeC,KAHf,GAGwBL,KAHxB,CAGeK,KAHf;AAIxB,QAAMC,WAAW,GAAGR,UAAU,CAACS,WAAX,GAAyBC,aAAzB,EAApB;AACA,QAAMC,YAAY,GAAGX,UAAU,CAACS,WAAX,GAAyBG,cAAzB,EAArB;AACA,QAAMC,MAAM,GAAGT,MAAM,CAACU,OAAP,GAAiBN,WAAjB,GAA+BG,YAA9C,CANwB,CAMoC;;AANpC,oBAODd,QAAQ,CAACO,MAAM,CAACW,IAAP,CAAYC,WAAZ,EAAD,CAPP;AAAA;AAAA,QAOjBD,IAPiB;AAAA,QAOZE,OAPY;;AAQxB,QAAMC,GAAG,GAAE,OAAX;;AAEA,QAAMC,gBAAgB,GAAG,UAASC,CAAT,EAAW;AAChC,UAAML,IAAI,GAAIK,CAAC,CAACC,MAAF,CAASC,KAAvB;AACA,UAAMA,KAAK,GAAGlB,MAAM,CAACW,IAAP,CAAYO,KAA1B;AACAlB,IAAAA,MAAM,CAACa,OAAP,CAAeF,IAAf;AACAX,IAAAA,MAAM,CAACW,IAAP,CAAYO,KAAZ,GAAoBA,KAApB;AACAnB,IAAAA,OAAO,CAACoB,IAAR;AACAN,IAAAA,OAAO,CAACF,IAAD,CAAP;AACAV,IAAAA,SAAS,CAAC,SAAD,CAAT;AACAC,IAAAA,cAAc,CAACc,CAAD,CAAd;AACH,GATD;;AAaA,SACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAO,IAAA,SAAS,EAAC,aAAjB;AAA+B,IAAA,KAAK,EAAEP,MAAM,CAACW,KAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADJ,EAEI;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAmC,IAAA,KAAK,EAAET,IAA1C;AAAgD,IAAA,QAAQ,EAAEI,gBAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBD,GAAxB,CADJ,EAEI;AAAQ,IAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAFJ,EAGI,oBAAC,KAAD;AAAO,IAAA,OAAO,EAAEX,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,CAFJ,CADJ;AAYH;;AAGD,SAASkB,KAAT,CAAevB,KAAf,EAAsB;AACpB,QAAMwB,OAAO,GAAGxB,KAAK,CAACwB,OAAtB;;AACA,MAAIA,OAAJ,EAAa;AACX,WAAO;AAAQ,MAAA,KAAK,EAAC,WAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAP;AACD;;AACD,SAAO,IAAP;AACD;;AAGD,eAAezB,UAAf","sourcesContent":["import React,{useState,useContext} from 'react';\nimport {AppContext} from '../../../../../../../App';\nimport Properties from '../../../../../../../conf/properties';\n\nfunction TypeConfig (props) {\n\n    const context = useContext(AppContext);\n    const {entity,setPrefix,collapsePrefix,bnode} = props;\n    const shapeStyles = Properties.getInstance().getShapeStyle();\n    const tripleStyles = Properties.getInstance().getTripleStyle();\n    const styles = entity.triples ? shapeStyles : tripleStyles; //is a Shape or a Triple?\n    const [type,setType] = useState(entity.type.getTypeName());\n    const iri ='<...>';\n\n    const handleTypeChange = function(e){\n        const type  = e.target.value;\n        const value = entity.type.value;\n        entity.setType(type);\n        entity.type.value = value;\n        context.emit();\n        setType(type);\n        setPrefix('example');\n        collapsePrefix(e)\n    }\n\n    \n\n    return (\n        <div className=\"xs-gridBox\">\n            <label className=\"customLabel\" style={styles.label}>Type </label>\n            <select className=\"customSelector\" value={type} onChange={handleTypeChange}>\n                <option value=\"iriRef\">{iri}</option>\n                <option value=\"prefixedIri\">QName</option>\n                <Bnode isBnode={bnode}/>\n            </select>\n        </div>\n    );\n                                   \n    \n}\n\n\nfunction Bnode(props) {\n  const isBnode = props.isBnode;\n  if (isBnode) {\n    return <option value=\"bnodeType\">Bnode</option>;\n  }\n  return null;\n}\n\n\nexport default TypeConfig;\n\n"]},"metadata":{},"sourceType":"module"}