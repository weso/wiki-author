{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { isFragment } from 'react-is';\nimport clsx from 'clsx';\nimport { withStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nvar SPACINGS = {\n  small: -16,\n  medium: null\n};\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      display: 'flex'\n    },\n\n    /* Styles applied to the avatar elements. */\n    avatar: {\n      border: \"2px solid \".concat(theme.palette.background.default),\n      marginLeft: -8\n    }\n  };\n};\nvar AvatarGroup = React.forwardRef(function AvatarGroup(props, ref) {\n  var childrenProp = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$spacing = props.spacing,\n      spacing = _props$spacing === void 0 ? 'medium' : _props$spacing,\n      _props$max = props.max,\n      max = _props$max === void 0 ? 5 : _props$max,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"spacing\", \"max\"]);\n\n  var children = React.Children.toArray(childrenProp).filter(function (child) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isFragment(child)) {\n        console.error([\"Material-UI: the AvatarGroup component doesn't accept a Fragment as a child.\", 'Consider providing an array instead.'].join('\\n'));\n      }\n    }\n\n    return React.isValidElement(child);\n  });\n  var extraAvatars = children.length > max ? children.length - max : 0;\n  return (\n    /*#__PURE__*/\n    React.createElement(\"div\", _extends({\n      className: clsx(classes.root, className),\n      ref: ref\n    }, other), children.slice(0, children.length - extraAvatars).map(function (child, index) {\n      return React.cloneElement(child, {\n        className: clsx(child.props.className, classes.avatar),\n        style: _extends({\n          zIndex: children.length - index,\n          marginLeft: spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing\n        }, child.props.style)\n      });\n    }), extraAvatars ?\n    /*#__PURE__*/\n    React.createElement(Avatar, {\n      className: classes.avatar,\n      style: {\n        zIndex: 0,\n        marginLeft: spacing && SPACINGS[spacing] !== undefined ? SPACINGS[spacing] : -spacing\n      }\n    }, \"+\", extraAvatars) : null)\n  );\n});\nprocess.env.NODE_ENV !== \"production\" ? AvatarGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The avatars to stack.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Max avatars to show before +x.\n   */\n  max: PropTypes.number,\n\n  /**\n   * Spacing between avatars.\n   */\n  spacing: PropTypes.oneOfType([PropTypes.oneOf(['medium', 'small']), PropTypes.number])\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiAvatarGroup'\n})(AvatarGroup);","map":null,"metadata":{},"sourceType":"module"}