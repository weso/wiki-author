{"ast":null,"code":"import TypesFactory from './types/typesFactory';\nimport CardinalityFactory from './shexUtils/cardinality/cardinalityFactory';\nimport CardinalitySimple from './shexUtils/cardinality/cardinalitySimple';\nimport PrefixedIri from './types/concreteTypes/prefixedIri';\nimport Primitive from './types/concreteTypes/primitive';\nimport ShapeRef from './shexUtils/shapeRef';\nimport Prefix from './shexUtils/prefix';\nimport { DEFAULTS } from '../../conf/config.js';\n\nclass Triple {\n  constructor(id, type = new PrefixedIri(new Prefix('schema', 'http://schema.org/')), constraint = new Primitive(), shapeRef = new ShapeRef(), facets = [], cardinality = new CardinalitySimple()) {\n    this.id = id;\n    this.type = type;\n    this.constraint = constraint;\n    this.shapeRef = shapeRef;\n    this.facets = facets;\n    this.cardinality = cardinality;\n    this.factory = new TypesFactory();\n    this.cardFactory = new CardinalityFactory();\n  }\n\n  addValue(constraint) {\n    this.constraints.push(constraint);\n    this.constraintsCount++;\n  }\n\n  addFacet(facet) {\n    this.facets.push(facet);\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  setType(type) {\n    this.type = this.factory.createType(type);\n  }\n\n  setConstraint(constraint) {\n    this.constraint = this.factory.createType(constraint);\n  }\n\n  setCardinality(cardinality, min, max) {\n    this.cardinality = this.cardFactory.createCardinality(cardinality, min, max);\n  }\n\n  getShapeRef() {\n    return this.shapeRef;\n  }\n\n  setShapeRef(shapeRef) {\n    this.shapeRef = shapeRef;\n  }\n\n  getFacets() {\n    return this.facets;\n  }\n\n  setFacets(facets) {\n    this.facets = facets;\n  }\n\n  getConstraint() {\n    return this.constraint;\n  }\n\n  getCardinality() {\n    return this.cardinality;\n  }\n\n  toString(separators) {\n    let str = '';\n    let type = this.getType();\n    let constraint = this.getConstraint();\n    let facets = this.getFacets();\n    let shapeRef = this.getShapeRef();\n    let cardinality = this.getCardinality();\n    separators = this.checkPrettyOptions(separators);\n    let tripleSeparator = separators.triple;\n    let constSeparator = separators.constraint;\n    let refSeparator = separators.ref;\n    let cardSeparator = separators.card;\n\n    if (type.value != '') {\n      str += '  ' + type + tripleSeparator;\n      str += this.checkFacets();\n\n      if (facets) {\n        facets.map(f => {\n          str += ' ' + f + ' ';\n        });\n      }\n\n      if (constraint.value == '' && DEFAULTS.pretty != 'pretty3') {\n        constSeparator = '';\n        refSeparator += ' ';\n      }\n\n      str += constSeparator + shapeRef + refSeparator + cardinality + cardSeparator + ';\\n';\n    }\n\n    return str;\n  }\n\n  checkPrettyOptions(separators) {\n    if (DEFAULTS.pretty == 'none') {\n      separators.triple = ' ';\n      separators.constraint = ' ';\n      separators.ref = ' ';\n    }\n\n    if (DEFAULTS.pretty == 'pretty1') {\n      separators.constraint = ' ';\n      separators.ref = ' ';\n    }\n\n    if (DEFAULTS.pretty == 'pretty2') {\n      separators.constraint = ' ';\n      separators.ref = separators.CRef;\n    } //default pretty3\n\n\n    return separators;\n  }\n  /**\n  * If none constraint and there are facets don't print the '.'\n   */\n\n\n  checkFacets() {\n    let constraint = this.getConstraint();\n    let shapeRef = this.getShapeRef();\n\n    if (this.facets.length > 0) {\n      if (constraint.getTypeName() != 'Primitive' && constraint.value != 'none') {\n        return constraint + ' ';\n      }\n\n      return '';\n    }\n\n    return constraint;\n  }\n\n}\n\nexport default Triple;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/entities/shexEntities/triple.js"],"names":["TypesFactory","CardinalityFactory","CardinalitySimple","PrefixedIri","Primitive","ShapeRef","Prefix","DEFAULTS","Triple","constructor","id","type","constraint","shapeRef","facets","cardinality","factory","cardFactory","addValue","constraints","push","constraintsCount","addFacet","facet","getId","getType","setType","createType","setConstraint","setCardinality","min","max","createCardinality","getShapeRef","setShapeRef","getFacets","setFacets","getConstraint","getCardinality","toString","separators","str","checkPrettyOptions","tripleSeparator","triple","constSeparator","refSeparator","ref","cardSeparator","card","value","checkFacets","map","f","pretty","CRef","length","getTypeName"],"mappings":"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","sourcesContent":["import TypesFactory from './types/typesFactory';\nimport CardinalityFactory from './shexUtils/cardinality/cardinalityFactory';\nimport CardinalitySimple from './shexUtils/cardinality/cardinalitySimple';\nimport PrefixedIri from './types/concreteTypes/prefixedIri';\nimport Primitive from './types/concreteTypes/primitive';\nimport ShapeRef from './shexUtils/shapeRef';\nimport Prefix from './shexUtils/prefix';\nimport {DEFAULTS} from '../../conf/config.js';\n\nclass Triple {\n\n    constructor(id,type=new PrefixedIri(new Prefix('schema','http://schema.org/')),constraint=new Primitive(),shapeRef=new ShapeRef(),facets=[],cardinality=new CardinalitySimple()) {\n        this.id = id;\n        this.type = type;\n        this.constraint = constraint;\n        this.shapeRef = shapeRef;\n        this.facets = facets;\n        this.cardinality = cardinality;\n        this.factory = new TypesFactory();\n        this.cardFactory = new CardinalityFactory();\n      }\n      \n    addValue(constraint){\n        this.constraints.push(constraint);\n        this.constraintsCount++;\n    }\n    \n    addFacet(facet){\n        this.facets.push(facet);\n    }\n\n    getId(){\n        return this.id;\n    }\n\n    getType(){\n      return this.type; \n    }\n\n    setType(type){\n       this.type = this.factory.createType(type);\n     }\n\n    setConstraint(constraint){\n        this.constraint = this.factory.createType(constraint);\n    }\n\n    setCardinality(cardinality,min,max){\n        this.cardinality = this.cardFactory.createCardinality(cardinality,min,max);\n    }\n\n    getShapeRef(){\n        return this.shapeRef;\n    }\n\n    setShapeRef(shapeRef){\n        this.shapeRef = shapeRef;\n    }\n\n\n    getFacets(){\n        return this.facets;\n    }\n\n    setFacets(facets){\n        this.facets = facets;\n    }\n\n    getConstraint(){\n       return this.constraint;\n    }\n\n\n    getCardinality(){\n        return this.cardinality;\n    }\n\n\n\n    toString(separators){\n        let str='';\n        let type=this.getType();\n        let constraint = this.getConstraint();\n        let facets = this.getFacets();\n        let shapeRef = this.getShapeRef();\n        let cardinality = this.getCardinality();\n        separators = this.checkPrettyOptions(separators);\n        let tripleSeparator = separators.triple; \n        let constSeparator = separators.constraint; \n        let refSeparator = separators.ref;\n        let cardSeparator = separators.card;\n \n        if(type.value!=''){\n            str+= '  '+type+tripleSeparator;\n            str+= this.checkFacets();\n            if(facets){\n                facets.map(f=>{\n                    str+=' '+f+' ';\n                })\n            }\n            if(constraint.value=='' && DEFAULTS.pretty!='pretty3' ){\n                constSeparator='';\n                refSeparator+=' ';\n            }\n            str+=constSeparator+shapeRef\n                +refSeparator+cardinality\n                +cardSeparator+';\\n';\n        }\n        return str;\n\n    }\n\n    checkPrettyOptions(separators){\n\n        if(DEFAULTS.pretty=='none'){\n            separators.triple=' ';\n            separators.constraint=' ';\n            separators.ref=' ';\n        }\n        if(DEFAULTS.pretty=='pretty1'){\n            separators.constraint=' ';\n            separators.ref=' ';\n        }\n        if(DEFAULTS.pretty=='pretty2'){\n            separators.constraint=' ';\n            separators.ref=separators.CRef;\n        }\n        \n        //default pretty3\n        return separators;\n    }\n\n    /**\n    * If none constraint and there are facets don't print the '.'\n     */\n    checkFacets(){\n        let constraint = this.getConstraint();\n        let shapeRef = this.getShapeRef();\n        if(this.facets.length>0){\n             if(constraint.getTypeName()!='Primitive' \n                && constraint.value!='none'){\n                    return constraint+' ';\n                }\n            return '';\n        }\n        return constraint;\n    }\n\n\n\n\n}\n\nexport default Triple;"]},"metadata":{},"sourceType":"module"}