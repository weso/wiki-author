{"ast":null,"code":"var store = require(\"store\");\n\nvar times = {\n  day: function () {\n    return 1000 * 3600 * 24; //millis to day\n  },\n  month: function () {\n    times.day() * 30;\n  },\n  year: function () {\n    times.month() * 12;\n  }\n};\n\nfunction isQuotaExceeded(e) {\n  var quotaExceeded = false;\n\n  if (e) {\n    if (e.code) {\n      switch (e.code) {\n        case 22:\n          quotaExceeded = true;\n          break;\n\n        case 1014:\n          // Firefox\n          if (e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") {\n            quotaExceeded = true;\n          }\n\n          break;\n      }\n    } else if (e.number === -2147024882) {\n      // Internet Explorer 8\n      quotaExceeded = true;\n    }\n  }\n\n  return quotaExceeded;\n}\n\nvar root = module.exports = {\n  set: function (key, val, exp, onQuotaExceeded) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n\n    if (key && val !== undefined) {\n      if (typeof exp == \"string\") {\n        exp = times[exp]();\n      } //try to store string for dom objects (e.g. XML result). Otherwise, we might get a circular reference error when stringifying this\n\n\n      if (val.documentElement) val = new XMLSerializer().serializeToString(val.documentElement);\n\n      try {\n        store.set(key, {\n          val: val,\n          exp: exp,\n          time: new Date().getTime()\n        });\n      } catch (e) {\n        e.quotaExceeded = isQuotaExceeded(e);\n\n        if (e.quotaExceeded && onQuotaExceeded) {\n          onQuotaExceeded(e);\n        } else {\n          throw e;\n        }\n      }\n    }\n  },\n  remove: function (key) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n\n    if (key) store.remove(key);\n  },\n  removeAll: function (filter) {\n    if (!store.enabled) return; //this is probably in private mode. Don't run, as we might get Js errors\n\n    if (!filter) {\n      store.clearAll();\n    } else if (typeof filter === \"function\") {\n      store.each(function (value, key) {\n        if (filter(key, value)) root.remove(key);\n      });\n    }\n  },\n  get: function (key) {\n    if (!store.enabled) return null; //this is probably in private mode. Don't run, as we might get Js errors\n\n    if (key) {\n      var info = store.get(key);\n\n      if (!info) {\n        return null;\n      }\n\n      if (info.exp && new Date().getTime() - info.time > info.exp) {\n        return null;\n      }\n\n      return info.val;\n    } else {\n      return null;\n    }\n  }\n};","map":null,"metadata":{},"sourceType":"script"}