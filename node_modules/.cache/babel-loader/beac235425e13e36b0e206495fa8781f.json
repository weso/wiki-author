{"ast":null,"code":"import isEqual from 'fast-deep-equal';\nimport getOptionProperty from './getOptionProperty';\nimport { isFunction, isString } from './nodash';\nimport stripDiacritics from './stripDiacritics';\nimport warn from './warn';\n\nfunction isMatch(input, string, props) {\n  var searchStr = input;\n  var str = string;\n\n  if (!props.caseSensitive) {\n    searchStr = searchStr.toLowerCase();\n    str = str.toLowerCase();\n  }\n\n  if (props.ignoreDiacritics) {\n    searchStr = stripDiacritics(searchStr);\n    str = stripDiacritics(str);\n  }\n\n  return str.indexOf(searchStr) !== -1;\n}\n/**\n * Default algorithm for filtering results.\n */\n\n\nexport default function defaultFilterBy(option, props) {\n  var filterBy = props.filterBy,\n      labelKey = props.labelKey,\n      multiple = props.multiple,\n      selected = props.selected,\n      text = props.text; // Don't show selected options in the menu for the multi-select case.\n\n  if (multiple && selected.some(function (o) {\n    return isEqual(o, option);\n  })) {\n    return false;\n  }\n\n  if (isFunction(labelKey) && isMatch(text, labelKey(option), props)) {\n    return true;\n  }\n\n  var fields = filterBy.slice();\n\n  if (isString(labelKey)) {\n    // Add the `labelKey` field to the list of fields if it isn't already there.\n    if (fields.indexOf(labelKey) === -1) {\n      fields.unshift(labelKey);\n    }\n  }\n\n  if (isString(option)) {\n    warn(fields.length <= 1, 'You cannot filter by properties when `option` is a string.');\n    return isMatch(text, option, props);\n  }\n\n  return fields.some(function (field) {\n    var value = getOptionProperty(option, field);\n\n    if (!isString(value)) {\n      warn(false, 'Fields passed to `filterBy` should have string values. Value will ' + 'be converted to a string; results may be unexpected.');\n      value = String(value);\n    }\n\n    return isMatch(text, value, props);\n  });\n}","map":null,"metadata":{},"sourceType":"module"}