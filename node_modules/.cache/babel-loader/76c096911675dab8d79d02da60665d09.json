{"ast":null,"code":"import _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport React from 'react';\nimport { TypeaheadContext } from './Context';\nimport { getHintText, getInputProps, getInputText, getIsOnlyResult, pick } from '../utils';\nimport { RETURN } from '../constants';\nvar inputPropKeys = ['activeIndex', 'disabled', 'id', 'inputRef', 'isFocused', 'isMenuShown', 'multiple', 'onBlur', 'onChange', 'onFocus', 'onKeyDown', 'placeholder'];\nvar propKeys = ['activeIndex', 'hideMenu', 'isMenuShown', 'labelKey', 'onClear', 'onHide', 'onRemove', 'results', 'selected', 'text', 'toggleMenu'];\nvar typeaheadContextKeys = ['activeIndex', 'id', 'initialItem', 'inputNode', 'onActiveItemChange', 'onAdd', 'onInitialItemChange', 'onMenuItemClick', 'selectHintOnEnter', 'setItem'];\n\nfunction getTypeaheadContextValue(props) {\n  return _extends({}, pick(props, typeaheadContextKeys), {\n    hintText: getHintText(props),\n    isOnlyResult: getIsOnlyResult(props)\n  });\n}\n\nvar TypeaheadManager =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TypeaheadManager, _React$Component);\n\n  function TypeaheadManager() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"_handleKeyDown\", function (e) {\n      var _this$props = _this.props,\n          initialItem = _this$props.initialItem,\n          onKeyDown = _this$props.onKeyDown,\n          onAdd = _this$props.onAdd;\n\n      switch (e.keyCode) {\n        case RETURN:\n          if (initialItem && getIsOnlyResult(_this.props)) {\n            onAdd(initialItem);\n          }\n\n          break;\n\n        default:\n          break;\n      }\n\n      onKeyDown(e);\n    });\n\n    return _this;\n  }\n\n  var _proto = TypeaheadManager.prototype;\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    var _this$props2 = this.props,\n        allowNew = _this$props2.allowNew,\n        isMenuShown = _this$props2.isMenuShown,\n        onInitialItemChange = _this$props2.onInitialItemChange,\n        onMenuToggle = _this$props2.onMenuToggle,\n        results = _this$props2.results; // Clear the initial item when there are no results.\n\n    if (!(allowNew || results.length)) {\n      onInitialItemChange(null);\n    }\n\n    if (isMenuShown !== prevProps.isMenuShown) {\n      onMenuToggle(isMenuShown);\n    }\n  };\n\n  _proto.render = function render() {\n    var childProps = _extends({}, pick(this.props, propKeys), {\n      getInputProps: getInputProps(_extends({}, pick(this.props, inputPropKeys), {\n        onKeyDown: this._handleKeyDown,\n        value: getInputText(this.props)\n      }))\n    });\n\n    return (\n      /*#__PURE__*/\n      React.createElement(TypeaheadContext.Provider, {\n        value: getTypeaheadContextValue(this.props)\n      }, this.props.children(childProps))\n    );\n  };\n\n  return TypeaheadManager;\n}(React.Component);\n\nexport default TypeaheadManager;","map":null,"metadata":{},"sourceType":"module"}