{"ast":null,"code":"import _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { getMatchBounds } from '../utils';\nvar propTypes = {\n  children: PropTypes.string.isRequired,\n  highlightClassName: PropTypes.string,\n  search: PropTypes.string.isRequired\n};\nvar defaultProps = {\n  highlightClassName: 'rbt-highlight-text'\n};\n/**\n * Stripped-down version of https://github.com/helior/react-highlighter\n *\n * Results are already filtered by the time the component is used internally so\n * we can safely ignore case and diacritical marks for the purposes of matching.\n */\n\nvar Highlighter =\n/*#__PURE__*/\nfunction (_React$PureComponent) {\n  _inheritsLoose(Highlighter, _React$PureComponent);\n\n  function Highlighter() {\n    return _React$PureComponent.apply(this, arguments) || this;\n  }\n\n  var _proto = Highlighter.prototype;\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        children = _this$props.children,\n        highlightClassName = _this$props.highlightClassName,\n        search = _this$props.search;\n\n    if (!search || !children) {\n      return children;\n    }\n\n    var matchCount = 0;\n    var remaining = children;\n    var highlighterChildren = [];\n\n    while (remaining) {\n      var bounds = getMatchBounds(remaining, search); // No match anywhere in the remaining string, stop.\n\n      if (!bounds) {\n        highlighterChildren.push(remaining);\n        break;\n      } // Capture the string that leads up to a match.\n\n\n      var nonMatch = remaining.slice(0, bounds.start);\n\n      if (nonMatch) {\n        highlighterChildren.push(nonMatch);\n      } // Capture the matching string.\n\n\n      var match = remaining.slice(bounds.start, bounds.end);\n      highlighterChildren.push(\n      /*#__PURE__*/\n      React.createElement(\"mark\", {\n        className: highlightClassName,\n        key: matchCount\n      }, match));\n      matchCount += 1; // And if there's anything left over, continue the loop.\n\n      remaining = remaining.slice(bounds.end);\n    }\n\n    return highlighterChildren;\n  };\n\n  return Highlighter;\n}(React.PureComponent);\n\n_defineProperty(Highlighter, \"propTypes\", propTypes);\n\n_defineProperty(Highlighter, \"defaultProps\", defaultProps);\n\nexport default Highlighter;","map":null,"metadata":{},"sourceType":"module"}