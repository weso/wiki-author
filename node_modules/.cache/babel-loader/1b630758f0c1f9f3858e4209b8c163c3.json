{"ast":null,"code":"\"use strict\";\n/**\n * Append prefix declaration to list of prefixes in query window.\n *\n * @param yashe\n * @param prefix\n */\n\nvar addPrefixes = function (yashe, prefixes) {\n  var existingPrefixes = yashe.getDefinedPrefixes(); //for backwards compatability, we stil support prefixes value as string (e.g. 'rdf: <http://fbfgfgf>'\n\n  if (typeof prefixes == \"string\") {\n    addPrefixAsString(yashe, prefixes);\n  } else {\n    for (var pref in prefixes) {\n      if (!(pref in existingPrefixes)) addPrefixAsString(yashe, pref + \": <\" + prefixes[pref] + \">\");\n    }\n  }\n\n  yashe.collapsePrefixes(false);\n};\n\nvar addPrefixAsString = function (yashe, prefixString) {\n  yashe.replaceRange(\"PREFIX \" + prefixString + \"\\n\", {\n    line: 0,\n    ch: 0\n  });\n  yashe.collapsePrefixes(false);\n};\n\nvar removePrefixes = function (yashe, prefixes) {\n  var escapeRegex = function (string) {\n    //taken from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript/3561711#3561711\n    return string.replace(/[-\\/\\\\^$*+?.()|[\\]{}]/g, \"\\\\$&\");\n  };\n\n  for (var pref in prefixes) {\n    yashe.setValue(yashe.getValue().replace(new RegExp(\"PREFIX\\\\s*\" + pref + \":\\\\s*\" + escapeRegex(\"<\" + prefixes[pref] + \">\") + \"\\\\s*\", \"ig\"), \"\"));\n  }\n\n  yashe.collapsePrefixes(false);\n};\n/**\n * Get defined prefixes  as array, in format {\"prefix:\" \"uri\"}\n *\n * @param cm\n * @returns {Array}\n */\n\n\nvar getDefinedPrefixes = function (yashe) {\n  //Use precise here. We want to be sure we use the most up to date state. If we're\n  //not, we might get outdated prefixes from the current query (creating loops such\n  //as https://github.com/OpenTriply/YASGUI/issues/84)\n  return yashe.getTokenAt({\n    line: yashe.lastLine(),\n    ch: yashe.getLine(yashe.lastLine()).length\n  }, true).state.prefixes;\n};\n\nvar setDefinedPrefixes = function (yashe, newPrefixes) {\n  yashe.getTokenAt({\n    line: yashe.lastLine(),\n    ch: yashe.getLine(yashe.lastLine()).length\n  }, true).state.prefixes = newPrefixes;\n};\n/**\n * Get the used indentation for a certain line\n *\n * @param yashe\n * @param line\n * @param charNumber\n * @returns\n */\n\n\nvar getIndentFromLine = function (yashe, line, charNumber) {\n  if (charNumber == undefined) charNumber = 1;\n  var token = yashe.getTokenAt({\n    line: line,\n    ch: charNumber\n  });\n\n  if (token == null || token == undefined || token.type != \"ws\") {\n    return \"\";\n  } else {\n    return token.string + getIndentFromLine(yashe, line, token.end + 1);\n  }\n};\n\nmodule.exports = {\n  addPrefixes: addPrefixes,\n  getDefinedPrefixes: getDefinedPrefixes,\n  setDefinedPrefixes: setDefinedPrefixes,\n  removePrefixes: removePrefixes\n};","map":null,"metadata":{},"sourceType":"script"}