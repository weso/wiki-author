{"ast":null,"code":"import PrefixedIri from './concreteTypes/prefixedIri';\nimport IriRef from './concreteTypes/iriRef';\nimport BNode from './concreteTypes/bNode';\nimport BlankType from './concreteTypes/blankType';\nimport Primitive from './concreteTypes/primitive';\nimport ValueSet from './concreteTypes/valueSet';\nimport Literal from './concreteTypes/kinds/literal';\nimport NonLiteral from './concreteTypes/kinds/nonLiteral';\nimport IriKind from './concreteTypes/kinds/iriKind';\nimport BNodeKind from './concreteTypes/kinds/bNodeKind';\nimport StringLiteral from './concreteTypes/literal/stringLiteral';\nimport NumberLiteral from './concreteTypes/literal/numberLiteral';\nimport BooleanLiteral from './concreteTypes/literal/booleanLiteral';\n\nclass TypesFactory {\n  createType(type) {\n    let retType;\n\n    if (type == 'iriRef') {\n      retType = new IriRef();\n    }\n\n    if (type == 'prefixedIri') {\n      retType = new PrefixedIri();\n    }\n\n    if (type == 'bnodeType') {\n      retType = new BNode();\n    }\n\n    if (type == 'blankType') {\n      retType = new BlankType();\n    }\n\n    if (type == 'primitive') {\n      retType = new Primitive();\n    }\n\n    if (type == 'literal') {\n      retType = new Literal();\n    }\n\n    if (type == 'nonliteral') {\n      retType = new NonLiteral();\n    }\n\n    if (type == 'iri') {\n      retType = new IriKind();\n    }\n\n    if (type == 'bnode') {\n      retType = new BNodeKind();\n    }\n\n    if (type == 'valueSet') {\n      retType = new ValueSet();\n    }\n\n    if (type == 'stringLiteral') {\n      retType = new StringLiteral();\n    }\n\n    if (type == 'numberLiteral') {\n      retType = new NumberLiteral();\n    }\n\n    if (type == 'booleanLiteral') {\n      retType = new BooleanLiteral();\n    }\n\n    return retType;\n  }\n\n}\n\nexport default TypesFactory;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/entities/shexEntities/types/typesFactory.js"],"names":["PrefixedIri","IriRef","BNode","BlankType","Primitive","ValueSet","Literal","NonLiteral","IriKind","BNodeKind","StringLiteral","NumberLiteral","BooleanLiteral","TypesFactory","createType","type","retType"],"mappings":"AAAA,OAAOA,WAAP,MAAuB,6BAAvB;AACA,OAAOC,MAAP,MAAkB,wBAAlB;AACA,OAAOC,KAAP,MAAiB,uBAAjB;AACA,OAAOC,SAAP,MAAqB,2BAArB;AACA,OAAOC,SAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAoB,0BAApB;AAEA,OAAOC,OAAP,MAAmB,+BAAnB;AACA,OAAOC,UAAP,MAAsB,kCAAtB;AACA,OAAOC,OAAP,MAAmB,+BAAnB;AACA,OAAOC,SAAP,MAAqB,iCAArB;AAGA,OAAOC,aAAP,MAAyB,uCAAzB;AACA,OAAOC,aAAP,MAAyB,uCAAzB;AACA,OAAOC,cAAP,MAA0B,wCAA1B;;AAIA,MAAMC,YAAN,CAAkB;AAEdC,EAAAA,UAAU,CAACC,IAAD,EAAM;AAEZ,QAAIC,OAAJ;;AACA,QAAGD,IAAI,IAAI,QAAX,EAAoB;AAChBC,MAAAA,OAAO,GAAG,IAAIf,MAAJ,EAAV;AACH;;AAED,QAAGc,IAAI,IAAI,aAAX,EAAyB;AACrBC,MAAAA,OAAO,GAAG,IAAIhB,WAAJ,EAAV;AACH;;AAED,QAAGe,IAAI,IAAI,WAAX,EAAuB;AACnBC,MAAAA,OAAO,GAAG,IAAId,KAAJ,EAAV;AACH;;AAED,QAAGa,IAAI,IAAI,WAAX,EAAuB;AACnBC,MAAAA,OAAO,GAAG,IAAIb,SAAJ,EAAV;AACH;;AAED,QAAGY,IAAI,IAAI,WAAX,EAAuB;AACnBC,MAAAA,OAAO,GAAG,IAAIZ,SAAJ,EAAV;AACH;;AAED,QAAGW,IAAI,IAAI,SAAX,EAAqB;AACjBC,MAAAA,OAAO,GAAG,IAAIV,OAAJ,EAAV;AACH;;AAED,QAAGS,IAAI,IAAI,YAAX,EAAwB;AACpBC,MAAAA,OAAO,GAAG,IAAIT,UAAJ,EAAV;AACH;;AAED,QAAGQ,IAAI,IAAI,KAAX,EAAiB;AACbC,MAAAA,OAAO,GAAG,IAAIR,OAAJ,EAAV;AACH;;AAED,QAAGO,IAAI,IAAI,OAAX,EAAmB;AACfC,MAAAA,OAAO,GAAG,IAAIP,SAAJ,EAAV;AACH;;AAED,QAAGM,IAAI,IAAI,UAAX,EAAsB;AAClBC,MAAAA,OAAO,GAAG,IAAIX,QAAJ,EAAV;AACH;;AAED,QAAGU,IAAI,IAAI,eAAX,EAA2B;AACvBC,MAAAA,OAAO,GAAG,IAAIN,aAAJ,EAAV;AACH;;AAED,QAAGK,IAAI,IAAI,eAAX,EAA2B;AACvBC,MAAAA,OAAO,GAAG,IAAIL,aAAJ,EAAV;AACH;;AAED,QAAGI,IAAI,IAAI,gBAAX,EAA4B;AACxBC,MAAAA,OAAO,GAAG,IAAIJ,cAAJ,EAAV;AACH;;AAGD,WAAOI,OAAP;AAEH;;AA5Da;;AAiElB,eAAeH,YAAf","sourcesContent":["import PrefixedIri from'./concreteTypes/prefixedIri';\nimport IriRef from'./concreteTypes/iriRef';\nimport BNode from'./concreteTypes/bNode';\nimport BlankType from'./concreteTypes/blankType';\nimport Primitive from'./concreteTypes/primitive';\nimport ValueSet from'./concreteTypes/valueSet';\n\nimport Literal from'./concreteTypes/kinds/literal';\nimport NonLiteral from'./concreteTypes/kinds/nonLiteral';\nimport IriKind from'./concreteTypes/kinds/iriKind';\nimport BNodeKind from'./concreteTypes/kinds/bNodeKind';\n\n\nimport StringLiteral from'./concreteTypes/literal/stringLiteral';\nimport NumberLiteral from'./concreteTypes/literal/numberLiteral';\nimport BooleanLiteral from'./concreteTypes/literal/booleanLiteral';\n\n\n\nclass TypesFactory{\n\n    createType(type){\n\n        let retType;\n        if(type == 'iriRef'){\n            retType = new IriRef();\n        }\n        \n        if(type == 'prefixedIri'){\n            retType = new PrefixedIri();\n        }\n        \n        if(type == 'bnodeType'){\n            retType = new BNode();\n        }\n\n        if(type == 'blankType'){\n            retType = new BlankType();\n        }\n\n        if(type == 'primitive'){\n            retType = new Primitive();\n        }\n\n        if(type == 'literal'){\n            retType = new Literal();\n        }\n\n        if(type == 'nonliteral'){\n            retType = new NonLiteral();\n        }\n\n        if(type == 'iri'){\n            retType = new IriKind();\n        }\n\n        if(type == 'bnode'){\n            retType = new BNodeKind();\n        }\n\n        if(type == 'valueSet'){\n            retType = new ValueSet();\n        }\n\n        if(type == 'stringLiteral'){\n            retType = new StringLiteral();\n        }\n\n        if(type == 'numberLiteral'){\n            retType = new NumberLiteral();\n        }\n\n        if(type == 'booleanLiteral'){\n            retType = new BooleanLiteral();\n        }\n \n\n        return retType;\n\n    }\n\n\n}\n\nexport default TypesFactory;"]},"metadata":{},"sourceType":"module"}