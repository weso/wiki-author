{"ast":null,"code":"\"use strict\";\n\nvar $ = require(\"jquery\"),\n    rdfUtils = require('./rdfUtils.js');\n/**\n * Write our own tooltip, to avoid loading another library for just this functionality. For now, we only use tooltip for showing parse errors, so this is quite a tailored solution\n * Requirements:\n * \t\tposition tooltip within codemirror frame as much as possible, to avoid z-index issues with external things on page\n * \t\tuse html as content\n */\n\n\nvar grammarTootlip = function (yashe, parent, html) {\n  var parent = $(parent);\n  var tooltip;\n  parent.hover(function () {\n    if (typeof html == \"function\") html = html();\n    tooltip = $(\"<div>\").addClass(\"yashe_tooltip\").html(html).appendTo(parent);\n    repositionTooltip();\n  }, function () {\n    $(\".yashe_tooltip\").remove();\n  });\n  /**\n  * only need to take into account top and bottom offset for this usecase\n  */\n\n  var repositionTooltip = function () {\n    if ($(yashe.getWrapperElement()).offset().top >= tooltip.offset().top) {\n      //shit, move the tooltip down. The tooltip now hovers over the top edge of the yashe instance\n      tooltip.css(\"bottom\", \"auto\");\n      tooltip.css(\"top\", \"26px\");\n    }\n  };\n};\n/**\n * \n * WIKIDATA Tooltip for properties and entities\n * \n */\n\n\nvar triggerTooltip = function (yashe, e) {\n  var posX = e.clientX,\n      posY = e.clientY + $(window).scrollTop();\n  var token = yashe.getTokenAt(yashe.coordsChar({\n    left: posX,\n    top: posY\n  })).string;\n  var prefixName = token.split(':')[0];\n  var wikiElement = token.split(':')[1]; //Check wikidata prefixes\n\n  if (rdfUtils.isWikidataValidPrefix(yashe, prefixName) && wikiElement !== undefined && wikiElement !== '') {\n    checkEntity(wikiElement).done(function (data) {\n      if (!data.error) {\n        var userLang, entity, description, theme; //Gets the preference languaje from the navigator\n\n        userLang = (navigator.language || navigator.userLanguage).split(\"-\")[0];\n        var content = data.entities[wikiElement.toUpperCase()]; //Check if the property/entity exist\n\n        if (!content.labels) return; //Some properties and entities are only avalible in English\n        //So if they do not exist we take it in English\n\n        if (content.labels[userLang] && content.descriptions[userLang]) {\n          entity = content.labels[userLang].value + ' (' + wikiElement + ')';\n          description = content.descriptions[userLang].value;\n        } else {\n          entity = content.labels['en'].value + ' (' + wikiElement + ')';\n          description = content.descriptions['en'].value;\n        }\n\n        theme = yashe.getOption('theme'); //Jquery in 2020 coooool\n\n        $('<div class=\"CodeMirror cm-s-default CodeMirror-wrap\">').css('position', 'absolute').css('z-index', '1200').css('max-width', '200px').css({\n          top: posY + 2,\n          left: posX + 2\n        }).addClass('wikidataTooltip').css('height', 'auto').append($('<div class=\"wikidata_tooltip\">').css(themeStyles[theme]).append($('<div>').html(entity).css(styles.title)).append($('<div>').html(description).css(styles.description))).appendTo('body').fadeIn('slow');\n      }\n    });\n  }\n}; //  U S A R         M  É  T  O  D  O    P  Á  R  A  M  S\n\n\nvar checkEntity = function (entity) {\n  return $.get({\n    url: 'https://www.wikidata.org/w/api.php?action=wbgetentities&format=json&ids=' + entity,\n    dataType: 'jsonp'\n  });\n};\n\nvar removeWikiToolTip = function () {\n  $('.wikidataTooltip').remove();\n};\n/**\n   * Returns a function, that, as long as it continues to be invoked, will not\n   * be triggered. The function will be called after it stops being called for\n   * N milliseconds. If `immediate` is passed, trigger the function on the\n   * leading edge, instead of the trailing.\n   *\n   * More info: https://davidwalsh.name/javascript-debounce-function\n   *\n * @param {funciton} func Function to be executed\n * @param {int} wait Time to wait\n * @param {boolean} immediate\n * @return {object} resutl\n */\n\n\nconst debounce = function (func, wait, immediate) {\n  let timeout;\n  let result;\n  return function () {\n    const context = this;\n    const args = arguments;\n\n    const later = function () {\n      timeout = null;\n      if (!immediate) result = func.apply(context, args);\n    };\n\n    const callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) result = func.apply(context, args);\n    return result;\n  };\n}; //I'm not able to make this works in the scss...\n\n\nconst styles = {\n  title: {\n    'text-align': 'left',\n    'font-size': 17,\n    'font-family': 'Arial, Helvetica, sans-serif'\n  },\n  description: {\n    'display': 'inline-block',\n    'line-height': '23px',\n    'text-align': 'left',\n    'margin-top': '3px',\n    'font-size': 14,\n    'font-family': 'Arial, Helvetica, sans-serif'\n  }\n};\nconst themeStyles = {\n  wiki: {\n    'display': 'inline-block',\n    'justify-content': 'center',\n    'padding': '10px',\n    'border-radius': '8px',\n    'border': '1px solid #B8F5F3',\n    'background': 'white',\n    'color': '#222',\n    'z-index': '1200'\n  },\n  dark: {\n    'display': 'inline-block',\n    'justify-content': 'center',\n    'padding': '5px',\n    'border-radius': '10px',\n    'border': '1px solid #70dbe9',\n    'background': '#222',\n    'color': 'white',\n    'z-index': '1200'\n  }\n};\nmodule.exports = {\n  grammarTootlip: grammarTootlip,\n  triggerTooltip: triggerTooltip,\n  removeWikiToolTip: removeWikiToolTip,\n  debounce: debounce\n};","map":null,"metadata":{},"sourceType":"script"}