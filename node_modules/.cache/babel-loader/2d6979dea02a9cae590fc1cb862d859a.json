{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { forwardRef } from 'react';\nimport { findDOMNode } from 'react-dom';\nimport RootCloseWrapper from \"react-overlays/RootCloseWrapper\";\nimport Overlay from '../core/Overlay';\nimport Typeahead from '../core/Typeahead';\nimport ClearButton from './ClearButton.react';\nimport Loader from './Loader.react';\nimport Token from './Token.react';\nimport TypeaheadInputMulti from './TypeaheadInputMulti.react';\nimport TypeaheadInputSingle from './TypeaheadInputSingle.react';\nimport TypeaheadMenu from './TypeaheadMenu.react';\nimport { getOptionLabel, isFunction, isSizeLarge, pick, preventInputBlur } from '../utils';\nimport { checkPropType, deprecated, inputPropsType, sizeType } from '../propTypes';\nvar propTypes = {\n  /**\n   * Specifies the size of the input.\n   */\n  bsSize: deprecated(sizeType, 'Use the `size` prop instead.'),\n\n  /**\n   * Displays a button to clear the input when there are selections.\n   */\n  clearButton: PropTypes.bool,\n\n  /**\n   * Props to be applied directly to the input. `onBlur`, `onChange`,\n   * `onFocus`, and `onKeyDown` are ignored.\n   */\n  inputProps: checkPropType(PropTypes.object, inputPropsType),\n\n  /**\n   * Bootstrap 4 only. Adds the `is-invalid` classname to the `form-control`.\n   */\n  isInvalid: PropTypes.bool,\n\n  /**\n   * Indicate whether an asynchronous data fetch is happening.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Bootstrap 4 only. Adds the `is-valid` classname to the `form-control`.\n   */\n  isValid: PropTypes.bool,\n\n  /**\n   * Callback for custom input rendering.\n   */\n  renderInput: PropTypes.func,\n\n  /**\n   * Callback for custom menu rendering.\n   */\n  renderMenu: PropTypes.func,\n\n  /**\n   * Callback for custom menu rendering.\n   */\n  renderToken: PropTypes.func,\n\n  /**\n   * Specifies the size of the input.\n   */\n  size: sizeType\n};\nvar defaultProps = {\n  clearButton: false,\n  inputProps: {},\n  isInvalid: false,\n  isLoading: false,\n  isValid: false,\n  renderMenu: function renderMenu(results, menuProps, props) {\n    return (\n      /*#__PURE__*/\n      React.createElement(TypeaheadMenu, _extends({}, menuProps, {\n        labelKey: props.labelKey,\n        options: results,\n        text: props.text\n      }))\n    );\n  },\n  renderToken: function renderToken(option, props, idx) {\n    return (\n      /*#__PURE__*/\n      React.createElement(Token, {\n        disabled: props.disabled,\n        key: idx,\n        onRemove: props.onRemove,\n        option: option,\n        tabIndex: props.tabIndex\n      }, getOptionLabel(option, props.labelKey))\n    );\n  }\n};\n\nfunction getOverlayProps(props) {\n  return pick(props, ['align', 'dropup', 'flip', 'positionFixed']);\n}\n\nvar TypeaheadComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(TypeaheadComponent, _React$Component);\n\n  function TypeaheadComponent() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"_referenceElement\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"referenceElementRef\", function (element) {\n      // Use `findDOMNode` here because it's easier and less fragile than\n      // forwarding refs to the input's container.\n\n      /* eslint-disable react/no-find-dom-node */\n      // $FlowFixMe: `findDOMNode` could return Text or an Element.\n      _this._referenceElement = findDOMNode(element);\n      /* eslint-enable react/no-find-dom-node */\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderInput\", function (inputProps, props) {\n      var _this$props = _this.props,\n          bsSize = _this$props.bsSize,\n          isInvalid = _this$props.isInvalid,\n          isValid = _this$props.isValid,\n          multiple = _this$props.multiple,\n          renderInput = _this$props.renderInput,\n          renderToken = _this$props.renderToken,\n          size = _this$props.size;\n\n      if (isFunction(renderInput)) {\n        return renderInput(inputProps, props);\n      }\n\n      var commonProps = _extends({}, inputProps, {\n        isInvalid: isInvalid,\n        isValid: isValid,\n        size: bsSize || size\n      });\n\n      if (!multiple) {\n        return (\n          /*#__PURE__*/\n          React.createElement(TypeaheadInputSingle, commonProps)\n        );\n      }\n\n      var labelKey = props.labelKey,\n          onRemove = props.onRemove,\n          selected = props.selected;\n      return (\n        /*#__PURE__*/\n        React.createElement(TypeaheadInputMulti, _extends({}, commonProps, {\n          selected: selected\n        }), selected.map(function (option, idx) {\n          return renderToken(option, _extends({}, commonProps, {\n            labelKey: labelKey,\n            onRemove: onRemove\n          }), idx);\n        }))\n      );\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderMenu\", function (results, menuProps, props) {\n      var _this$props2 = _this.props,\n          emptyLabel = _this$props2.emptyLabel,\n          id = _this$props2.id,\n          maxHeight = _this$props2.maxHeight,\n          newSelectionPrefix = _this$props2.newSelectionPrefix,\n          paginationText = _this$props2.paginationText,\n          renderMenu = _this$props2.renderMenu,\n          renderMenuItemChildren = _this$props2.renderMenuItemChildren;\n      return renderMenu(results, _extends({}, menuProps, {\n        emptyLabel: emptyLabel,\n        id: id,\n        maxHeight: maxHeight,\n        newSelectionPrefix: newSelectionPrefix,\n        paginationText: paginationText,\n        renderMenuItemChildren: renderMenuItemChildren\n      }), props);\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderAux\", function (_ref) {\n      var onClear = _ref.onClear,\n          selected = _ref.selected;\n      var _this$props3 = _this.props,\n          bsSize = _this$props3.bsSize,\n          clearButton = _this$props3.clearButton,\n          disabled = _this$props3.disabled,\n          isLoading = _this$props3.isLoading,\n          size = _this$props3.size;\n      var content;\n\n      if (isLoading) {\n        content =\n        /*#__PURE__*/\n        React.createElement(Loader, {\n          size: bsSize || size\n        });\n      } else if (clearButton && !disabled && selected.length) {\n        content =\n        /*#__PURE__*/\n        React.createElement(ClearButton, {\n          size: bsSize || size,\n          onClick: onClear,\n          onFocus: function onFocus(e) {\n            // Prevent the main input from auto-focusing again.\n            e.stopPropagation();\n          },\n          onMouseDown: preventInputBlur\n        });\n      }\n\n      return content ?\n      /*#__PURE__*/\n      React.createElement(\"div\", {\n        className: cx('rbt-aux', {\n          'rbt-aux-lg': isSizeLarge(bsSize)\n        })\n      }, content) : null;\n    });\n\n    return _this;\n  }\n\n  var _proto = TypeaheadComponent.prototype;\n\n  _proto.render = function render() {\n    var _this2 = this;\n\n    var _this$props4 = this.props,\n        children = _this$props4.children,\n        className = _this$props4.className,\n        instanceRef = _this$props4.instanceRef,\n        open = _this$props4.open,\n        options = _this$props4.options,\n        style = _this$props4.style;\n    return (\n      /*#__PURE__*/\n      React.createElement(Typeahead, _extends({}, this.props, {\n        options: options,\n        ref: instanceRef\n      }), function (_ref2) {\n        var getInputProps = _ref2.getInputProps,\n            props = _objectWithoutPropertiesLoose(_ref2, [\"getInputProps\"]);\n\n        var hideMenu = props.hideMenu,\n            isMenuShown = props.isMenuShown,\n            results = props.results;\n\n        var auxContent = _this2._renderAux(props);\n\n        return (\n          /*#__PURE__*/\n          React.createElement(RootCloseWrapper, {\n            disabled: open || !isMenuShown,\n            onRootClose: hideMenu\n          },\n          /*#__PURE__*/\n          React.createElement(\"div\", {\n            className: cx('rbt', {\n              'has-aux': !!auxContent\n            }, className),\n            style: _extends({}, style, {\n              outline: 'none',\n              position: 'relative'\n            }),\n            tabIndex: -1\n          }, _this2._renderInput(_extends({}, getInputProps(_this2.props.inputProps), {\n            ref: _this2.referenceElementRef\n          }), props),\n          /*#__PURE__*/\n          React.createElement(Overlay, _extends({}, getOverlayProps(_this2.props), {\n            isMenuShown: isMenuShown,\n            referenceElement: _this2._referenceElement\n          }), function (menuProps) {\n            return _this2._renderMenu(results, menuProps, props);\n          }), auxContent, isFunction(children) ? children(props) : children))\n        );\n      })\n    );\n  };\n\n  return TypeaheadComponent;\n}(React.Component);\n\n_defineProperty(TypeaheadComponent, \"propTypes\", propTypes);\n\n_defineProperty(TypeaheadComponent, \"defaultProps\", defaultProps);\n\nexport default forwardRef(function (props, ref) {\n  return (\n    /*#__PURE__*/\n    React.createElement(TypeaheadComponent, _extends({}, props, {\n      instanceRef: ref\n    }))\n  );\n});","map":null,"metadata":{},"sourceType":"module"}