{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/wiki-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/ConstraintComp.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { Collapse } from 'reactstrap';\nimport { AppContext } from '../../../../../../App';\nimport { getPrefix } from '../../../../../../utils/prefixUtils';\nimport shexUtils from '../../../../../../utils/shexUtils';\nimport yasheUtils from '../../../../../../utils/yasheUtils';\nimport PrefixConfig from './config/PrefixConfig';\nimport ValueSetContainer from './constraint/ValueSetContainer';\nimport Properties from '../../../../../../conf/properties';\nconst primitives = ['String', 'Integer', 'Date', 'Boolean'];\nconst iriStr = '<...>';\n\nfunction ConstraintComp(props) {\n  const context = useContext(AppContext);\n  const triple = props.triple;\n  const styles = Properties.getInstance().getConstraintStyle();\n  let constValue = triple.constraint.getTypeName();\n  let primValue = triple.constraint.value;\n\n  if (constValue != 'primitive') {\n    primValue = 'custom';\n  }\n\n  let initialPrefix = 'example';\n\n  if (triple.constraint.prefix != undefined) {\n    initialPrefix = triple.constraint.prefix.prefixValue;\n  }\n\n  let initialValueSet = [];\n\n  if (constValue == 'valueSet') {\n    initialValueSet = triple.constraint.getValues();\n  }\n\n  const _useState = useState(triple.constraint.value || ''),\n        _useState2 = _slicedToArray(_useState, 2),\n        name = _useState2[0],\n        setName = _useState2[1];\n\n  const _useState3 = useState(initialPrefix),\n        _useState4 = _slicedToArray(_useState3, 2),\n        prefix = _useState4[0],\n        setPrefix = _useState4[1];\n\n  const _useState5 = useState(initialValueSet),\n        _useState6 = _slicedToArray(_useState5, 2),\n        valueSet = _useState6[0],\n        setValueSet = _useState6[1];\n\n  const _useState7 = useState(primValue),\n        _useState8 = _slicedToArray(_useState7, 2),\n        primitive = _useState8[0],\n        setPrimitive = _useState8[1];\n\n  const _useState9 = useState(constValue),\n        _useState10 = _slicedToArray(_useState9, 2),\n        constraint = _useState10[0],\n        setConstraint = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        isCustomOpen = _useState12[0],\n        setCustomOpen = _useState12[1];\n\n  const _useState13 = useState(false),\n        _useState14 = _slicedToArray(_useState13, 2),\n        isValueSetOpen = _useState14[0],\n        setValueSetOpen = _useState14[1];\n\n  const _useState15 = useState(false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        isNameOpen = _useState16[0],\n        setNameOpen = _useState16[1];\n\n  const _useState17 = useState(false),\n        _useState18 = _slicedToArray(_useState17, 2),\n        isPrefixOpen = _useState18[0],\n        setPrefixOpen = _useState18[1];\n\n  const handlePrefixChange = function (e) {\n    let prefix = getPrefix(e.target.value);\n    triple.constraint.setPrefix(prefix);\n    context.emit();\n    setPrefix(e.target.value);\n  };\n\n  const handleNameChange = function (e) {\n    let newName = e.target.value;\n    triple.constraint.setValue(newName);\n    context.emit();\n    setName(newName);\n  };\n\n  const handlePrimitiveChange = function (e) {\n    const newPrimitive = e.target.value;\n    triple.setConstraint('primitive');\n    triple.constraint.setValue(newPrimitive);\n    setConstraint('primitive');\n    setPrimitive(newPrimitive);\n    checkRefs(newPrimitive);\n    context.emit();\n  };\n\n  const handleConstraintChange = function (e) {\n    let newConstraint = e.target.value;\n    setConstraint(newConstraint);\n    triple.setConstraint(newConstraint);\n    triple.constraint.setValue(name);\n    context.emit();\n  };\n\n  const checkCollapses = function () {\n    setCustomOpen(true);\n    setNameOpen(false);\n    setPrefixOpen(false);\n    setValueSetOpen(false);\n\n    if (constraint == 'iriRef') {\n      setNameOpen(true);\n    }\n\n    if (constraint == 'prefixedIri') {\n      setNameOpen(true);\n      setPrefixOpen(true);\n    }\n\n    if (constraint == 'primitive') {\n      if (primitive != 'custom') {\n        setCustomOpen(false);\n      } else {\n        setConstraint('prefixedIri');\n        setName('');\n        triple.setConstraint('prefixedIri');\n        context.emit();\n      }\n    }\n\n    if (constraint == 'valueSet') {\n      setValueSetOpen(true);\n    }\n  };\n\n  const checkRefs = function (prim) {\n    if (prim == 'none') {\n      if (triple.shapeRef.shape != null) {\n        triple.setConstraint('blankType');\n      }\n    }\n  };\n\n  checkRefs(primitive);\n  useEffect(() => {\n    checkCollapses();\n  });\n  return React.createElement(\"div\", {\n    className: \"xs-gridBox\",\n    style: styles.body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"gridLabel\",\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Constraint\"), React.createElement(\"select\", {\n    className: \"customSelector\",\n    value: primitive,\n    onChange: handlePrimitiveChange,\n    title: \"Constraint\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"none\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138\n    },\n    __self: this\n  }, \"None\"), primitives.map(prim => {\n    return React.createElement(\"option\", {\n      key: prim,\n      value: prim.toLowerCase(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, prim);\n  }), React.createElement(\"option\", {\n    value: \"custom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Custom\")), React.createElement(Collapse, {\n    isOpen: isCustomOpen,\n    className: \"constraintCollapse\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"xs-customConstraint\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, \"Type\"), React.createElement(\"select\", {\n    className: \"customSelector\",\n    value: constraint,\n    onChange: handleConstraintChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"iriRef\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, iriStr), React.createElement(\"option\", {\n    value: \"prefixedIri\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, \"QName\"), React.createElement(\"option\", {\n    value: \"valueSet\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156\n    },\n    __self: this\n  }, \"ValueSet\"), React.createElement(\"option\", {\n    value: \"literal\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157\n    },\n    __self: this\n  }, \"Literal\"), React.createElement(\"option\", {\n    value: \"nonliteral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158\n    },\n    __self: this\n  }, \"NonLiteral\"), React.createElement(\"option\", {\n    value: \"iri\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  }, \"IRI\"), React.createElement(\"option\", {\n    value: \"bnode\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  }, \"BNode\"))), React.createElement(Collapse, {\n    isOpen: isNameOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"xs-customConstraint\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"Name\"), React.createElement(\"input\", {\n    type: \"text\",\n    className: \"name\",\n    value: name,\n    onChange: handleNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }))), React.createElement(Collapse, {\n    isOpen: isPrefixOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"xs-customConstraint\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, \"Prefix \"), React.createElement(\"select\", {\n    className: \"customSelector\",\n    value: prefix,\n    onChange: handlePrefixChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"example\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 179\n    },\n    __self: this\n  }, \"example\"), context.prefixes.map(pre => {\n    if (pre.prefixName != '') {\n      return React.createElement(\"option\", {\n        key: pre.id,\n        value: pre.prefixValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, pre.prefixName);\n    }\n  })))), React.createElement(Collapse, {\n    isOpen: isValueSetOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  }, React.createElement(ValueSetContainer, {\n    triple: triple,\n    valueSet: valueSet,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193\n    },\n    __self: this\n  }))));\n}\n\nexport default ConstraintComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/ConstraintComp.js"],"names":["React","useState","useContext","useEffect","Collapse","AppContext","getPrefix","shexUtils","yasheUtils","PrefixConfig","ValueSetContainer","Properties","primitives","iriStr","ConstraintComp","props","context","triple","styles","getInstance","getConstraintStyle","constValue","constraint","getTypeName","primValue","value","initialPrefix","prefix","undefined","prefixValue","initialValueSet","getValues","name","setName","setPrefix","valueSet","setValueSet","primitive","setPrimitive","setConstraint","isCustomOpen","setCustomOpen","isValueSetOpen","setValueSetOpen","isNameOpen","setNameOpen","isPrefixOpen","setPrefixOpen","handlePrefixChange","e","target","emit","handleNameChange","newName","setValue","handlePrimitiveChange","newPrimitive","checkRefs","handleConstraintChange","newConstraint","checkCollapses","prim","shapeRef","shape","body","label","map","toLowerCase","prefixes","pre","prefixName","id"],"mappings":"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","sourcesContent":["import React,{useState,useContext,useEffect} from 'react';\nimport { Collapse } from 'reactstrap';\nimport {AppContext} from '../../../../../../App';\nimport {getPrefix} from '../../../../../../utils/prefixUtils';\nimport shexUtils from '../../../../../../utils/shexUtils';\nimport yasheUtils from '../../../../../../utils/yasheUtils';\nimport PrefixConfig from './config/PrefixConfig';\nimport ValueSetContainer from './constraint/ValueSetContainer';\nimport Properties from '../../../../../../conf/properties';\n\nconst primitives = ['String','Integer','Date','Boolean'];\nconst iriStr ='<...>';\n\nfunction ConstraintComp (props) {\n\n    const context = useContext(AppContext);\n    const {triple} = props;\n    const styles = Properties.getInstance().getConstraintStyle();\n    \n    let constValue = triple.constraint.getTypeName();\n    let primValue = triple.constraint.value;\n\n    if(constValue!='primitive'){\n        primValue = 'custom';\n    }\n\n    let initialPrefix = 'example';\n    if(triple.constraint.prefix!=undefined){\n        initialPrefix = triple.constraint.prefix.prefixValue;\n    }\n\n    let initialValueSet = [];\n    if(constValue == 'valueSet'){\n        initialValueSet = triple.constraint.getValues();\n    }\n    \n    const [name,setName] = useState(triple.constraint.value || '');\n    const [prefix,setPrefix] = useState(initialPrefix);\n    const [valueSet,setValueSet] = useState(initialValueSet);\n    const [primitive,setPrimitive] = useState(primValue);    \n    const [constraint,setConstraint] = useState(constValue);\n    const [isCustomOpen,setCustomOpen] = useState(false);\n    const [isValueSetOpen,setValueSetOpen] = useState(false);\n    const [isNameOpen,setNameOpen] = useState(false);\n    const [isPrefixOpen,setPrefixOpen] = useState(false);\n        \n   \n\n    const handlePrefixChange = function(e){ \n        let prefix = getPrefix(e.target.value);\n        triple.constraint.setPrefix(prefix);\n        context.emit();\n        setPrefix(e.target.value);\n\n    }\n\n    const handleNameChange = function(e){\n        let newName = e.target.value;\n        triple.constraint.setValue(newName);\n        context.emit();\n        setName(newName);\n    }\n\n      const handlePrimitiveChange = function(e){\n        const newPrimitive = e.target.value;\n        triple.setConstraint('primitive');\n        triple.constraint.setValue(newPrimitive);\n        setConstraint('primitive');\n        setPrimitive(newPrimitive);\n        checkRefs(newPrimitive);     \n        context.emit();\n    }\n\n\n    const handleConstraintChange = function(e){\n        let newConstraint = e.target.value;\n        setConstraint(newConstraint);\n        triple.setConstraint(newConstraint);\n        triple.constraint.setValue(name);\n        context.emit();\n    }\n\n \n\n    const checkCollapses = function(){\n        setCustomOpen(true);  \n        setNameOpen(false);\n        setPrefixOpen(false);\n        setValueSetOpen(false);\n        \n        if(constraint == 'iriRef'){\n            setNameOpen(true);\n        }\n\n        if(constraint == 'prefixedIri'){\n            setNameOpen(true);\n            setPrefixOpen(true);\n        }\n\n        if(constraint == 'primitive'){\n            if(primitive!='custom'){\n                setCustomOpen(false);\n            }else{\n                setConstraint('prefixedIri');\n                setName('');\n                triple.setConstraint('prefixedIri');\n                context.emit();\n            }\n        }\n\n        if(constraint == 'valueSet'){\n            setValueSetOpen(true);\n        }\n\n    }\n\n    const checkRefs = function(prim){\n        if(prim =='none'){\n            if(triple.shapeRef.shape != null){\n                triple.setConstraint('blankType');\n            }\n        }\n    }\n\n    checkRefs(primitive);\n\n    useEffect(() => {\n        checkCollapses();\n    })\n\n    return (\n                <div className=\"xs-gridBox\" style={styles.body}>\n                    <label className='gridLabel' style={styles.label}>Constraint</label>\n                    <select className=\"customSelector\" \n                        value={primitive} \n                        onChange={handlePrimitiveChange}\n                        title=\"Constraint\">\n                        <option value='none'>None</option>\n                        {\n                            primitives.map(prim =>{\n                                return <option key={prim} value={prim.toLowerCase()}>{prim}</option>\n                            })\n                        }\n                        <option value='custom'>Custom</option>\n                    </select>    \n\n                    <Collapse isOpen={isCustomOpen} className='constraintCollapse'>\n                        <div className=\"xs-customConstraint\">\n                            <label style={styles.label}>Type</label>\n                            <select className=\"customSelector\"\n                                    value={constraint}\n                                    onChange={handleConstraintChange}>\n                                \n                                <option value=\"iriRef\">{iriStr}</option>\n                                <option value=\"prefixedIri\">QName</option>\n                                <option value=\"valueSet\">ValueSet</option>\n                                <option value=\"literal\">Literal</option>\n                                <option value=\"nonliteral\">NonLiteral</option>\n                                <option value=\"iri\">IRI</option>\n                                <option value=\"bnode\">BNode</option>\n                            </select>\n                        </div>     \n\n            \n                        <Collapse isOpen={isNameOpen}>\n                            <div className=\"xs-customConstraint\">\n                                <label style={styles.label}>Name</label>\n                                <input  type=\"text\" \n                                        className=\"name\"\n                                        value={name}\n                                        onChange={handleNameChange}/>\n                            </div> \n                        </Collapse>\n\n                         <Collapse isOpen={isPrefixOpen}>\n                            <div className=\"xs-customConstraint\">\n                                <label style={styles.label}>Prefix </label>\n                                <select className=\"customSelector\" value={prefix} onChange={handlePrefixChange}>\n                                    <option value=\"example\">example</option>\n                                    { \n                                    context.prefixes.map((pre) =>{\n                                        if(pre.prefixName!=''){\n                                            return <option key={pre.id} value={pre.prefixValue}>{pre.prefixName}</option>\n                                        }                        \n                                    })\n                                }\n                                </select>\n                            </div>\n                        </Collapse>\n\n\n                        <Collapse isOpen={isValueSetOpen}>\n                            <ValueSetContainer  triple={triple} valueSet={valueSet}/>\n                        </Collapse>\n                    </Collapse>                                                         \n                </div>\n  \n    );\n                                   \n    \n}\n\n\nexport default ConstraintComp;\n\n"]},"metadata":{},"sourceType":"module"}