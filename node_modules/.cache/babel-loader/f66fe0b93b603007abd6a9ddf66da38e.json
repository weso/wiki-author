{"ast":null,"code":"import Type from '../type';\n\nclass ValueSet extends Type {\n  constructor(values = [], value) {\n    // If we use 'value' instead of 'values' it doesn't work \n    // I am not sure why...\n    super(value);\n    this.values = values;\n  }\n\n  addValue(value) {\n    this.values.push(value);\n  }\n\n  getValues() {\n    return this.values;\n  }\n\n  setValues(values) {\n    this.values = values;\n  }\n\n  getTypeName() {\n    return 'valueSet';\n  }\n\n  toString() {\n    let str = '[';\n    this.values.map(v => {\n      str += v.toString() + ' ';\n    });\n    str += ']';\n    return str;\n  }\n\n}\n\nexport default ValueSet;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/entities/shexEntities/types/concreteTypes/valueSet.js"],"names":["Type","ValueSet","constructor","values","value","addValue","push","getValues","setValues","getTypeName","toString","str","map","v"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,SAAjB;;AAEA,MAAMC,QAAN,SAAuBD,IAAvB,CAA2B;AAEtBE,EAAAA,WAAW,CAACC,MAAM,GAAC,EAAR,EAAWC,KAAX,EAAiB;AACzB;AACA;AACA,UAAMA,KAAN;AACA,SAAKD,MAAL,GAAcA,MAAd;AACH;;AAEDE,EAAAA,QAAQ,CAACD,KAAD,EAAO;AACX,SAAKD,MAAL,CAAYG,IAAZ,CAAiBF,KAAjB;AACH;;AAGDG,EAAAA,SAAS,GAAE;AACP,WAAO,KAAKJ,MAAZ;AACH;;AAEDK,EAAAA,SAAS,CAACL,MAAD,EAAQ;AACb,SAAKA,MAAL,GAAcA,MAAd;AACH;;AAEDM,EAAAA,WAAW,GAAE;AACT,WAAO,UAAP;AACH;;AAEDC,EAAAA,QAAQ,GAAE;AACN,QAAIC,GAAG,GAAE,GAAT;AACA,SAAKR,MAAL,CAAYS,GAAZ,CAAgBC,CAAC,IAAE;AACfF,MAAAA,GAAG,IAAEE,CAAC,CAACH,QAAF,KAAa,GAAlB;AACH,KAFD;AAGAC,IAAAA,GAAG,IAAE,GAAL;AACA,WAAOA,GAAP;AACH;;AAjCsB;;AAuC3B,eAAeV,QAAf","sourcesContent":["import Type from '../type';\n\nclass ValueSet extends Type{\n\n     constructor(values=[],value){\n        // If we use 'value' instead of 'values' it doesn't work \n        // I am not sure why...\n        super(value);\n        this.values = values;\n    }\n\n    addValue(value){\n        this.values.push(value);\n    }\n       \n\n    getValues(){\n        return this.values;\n    }\n\n    setValues(values){\n        this.values = values;\n    }\n\n    getTypeName(){\n        return 'valueSet';\n    }\n\n    toString(){\n        let str ='[';\n        this.values.map(v=>{\n            str+=v.toString()+' ';\n        })\n        str+=']';\n        return str;\n    }\n\n\n\n}\n\nexport default ValueSet;"]},"metadata":{},"sourceType":"module"}