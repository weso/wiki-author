{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/wiki-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/constraint/valueSetValues/QNameValue.js\";\nimport React, { useState, useContext } from 'react';\nimport { AppContext } from '../../../../../../../../App';\nimport { Collapse } from 'reactstrap';\nimport { getPrefix } from '../../../../../../../../utils/prefixUtils';\n\nfunction QNameValue(props) {\n  const type = props.type,\n        isOpen = props.isOpen;\n  const context = useContext(AppContext);\n  let initialPrefix = 'example';\n\n  if (type.prefix != undefined) {\n    initialPrefix = type.prefix.prefixValue;\n  }\n\n  const _useState = useState(initialPrefix),\n        _useState2 = _slicedToArray(_useState, 2),\n        prefix = _useState2[0],\n        setPrefix = _useState2[1];\n\n  const _useState3 = useState(type.value),\n        _useState4 = _slicedToArray(_useState3, 2),\n        name = _useState4[0],\n        setName = _useState4[1];\n\n  const handlePrefixChange = function (e) {\n    let prefixName = e.target.value;\n    let newPrefix = getPrefix(prefixName);\n    console.log(prefix);\n    type.setPrefix(newPrefix);\n    context.emit();\n    setPrefix(prefixName);\n  };\n\n  const handleNameChange = function (e) {\n    let newName = e.target.value;\n    setName(newName);\n    type.setValue(newName);\n    context.emit();\n  };\n\n  return React.createElement(Collapse, {\n    isOpen: isOpen,\n    className: \"qnameSetCollapse\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"customSelector\",\n    value: prefix,\n    onChange: handlePrefixChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"example\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"example\"), context.prefixes.map(pre => {\n    if (pre.prefixName != '') {\n      return React.createElement(\"option\", {\n        key: pre.id,\n        value: pre.prefixValue,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 41\n        },\n        __self: this\n      }, pre.prefixName);\n    }\n  })), React.createElement(\"input\", {\n    type: \"text\",\n    className: \"name\",\n    value: name,\n    onChange: handleNameChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }));\n}\n\nexport default QNameValue;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/constraint/valueSetValues/QNameValue.js"],"names":["React","useState","useContext","AppContext","Collapse","getPrefix","QNameValue","props","type","isOpen","context","initialPrefix","prefix","undefined","prefixValue","setPrefix","value","name","setName","handlePrefixChange","e","prefixName","target","newPrefix","console","log","emit","handleNameChange","newName","setValue","prefixes","map","pre","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,UAAvB,QAAwC,OAAxC;AACA,SAAQC,UAAR,QAAyB,6BAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAAQC,SAAR,QAAwB,2CAAxB;;AAEA,SAASC,UAAT,CAAqBC,KAArB,EAA4B;AAAA,QAEjBC,IAFiB,GAEFD,KAFE,CAEjBC,IAFiB;AAAA,QAEZC,MAFY,GAEFF,KAFE,CAEZE,MAFY;AAGxB,QAAMC,OAAO,GAAGR,UAAU,CAACC,UAAD,CAA1B;AAEA,MAAIQ,aAAa,GAAG,SAApB;;AACA,MAAGH,IAAI,CAACI,MAAL,IAAaC,SAAhB,EAA0B;AACtBF,IAAAA,aAAa,GAAGH,IAAI,CAACI,MAAL,CAAYE,WAA5B;AACH;;AARuB,oBASCb,QAAQ,CAACU,aAAD,CATT;AAAA;AAAA,QASjBC,MATiB;AAAA,QASVG,SATU;;AAAA,qBAUHd,QAAQ,CAACO,IAAI,CAACQ,KAAN,CAVL;AAAA;AAAA,QAUjBC,IAViB;AAAA,QAUZC,OAVY;;AAaxB,QAAMC,kBAAkB,GAAG,UAASC,CAAT,EAAW;AAClC,QAAIC,UAAU,GAAGD,CAAC,CAACE,MAAF,CAASN,KAA1B;AACA,QAAIO,SAAS,GAAGlB,SAAS,CAACgB,UAAD,CAAzB;AACAG,IAAAA,OAAO,CAACC,GAAR,CAAYb,MAAZ;AACAJ,IAAAA,IAAI,CAACO,SAAL,CAAeQ,SAAf;AACAb,IAAAA,OAAO,CAACgB,IAAR;AACAX,IAAAA,SAAS,CAACM,UAAD,CAAT;AACH,GAPD;;AASA,QAAMM,gBAAgB,GAAG,UAASP,CAAT,EAAW;AAChC,QAAIQ,OAAO,GAAGR,CAAC,CAACE,MAAF,CAASN,KAAvB;AACAE,IAAAA,OAAO,CAACU,OAAD,CAAP;AACApB,IAAAA,IAAI,CAACqB,QAAL,CAAcD,OAAd;AACAlB,IAAAA,OAAO,CAACgB,IAAR;AACH,GALD;;AAOA,SAAQ,oBAAC,QAAD;AAAU,IAAA,MAAM,EAAEjB,MAAlB;AAA0B,IAAA,SAAS,EAAC,kBAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AAAmC,IAAA,KAAK,EAAEG,MAA1C;AAAkD,IAAA,QAAQ,EAAEO,kBAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA;AAAQ,IAAA,KAAK,EAAC,SAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADA,EAGIT,OAAO,CAACoB,QAAR,CAAiBC,GAAjB,CAAsBC,GAAD,IAAQ;AACzB,QAAGA,GAAG,CAACX,UAAJ,IAAgB,EAAnB,EAAsB;AAClB,aAAO;AAAQ,QAAA,GAAG,EAAEW,GAAG,CAACC,EAAjB;AAAqB,QAAA,KAAK,EAAED,GAAG,CAAClB,WAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8CkB,GAAG,CAACX,UAAlD,CAAP;AACH;AACJ,GAJD,CAHJ,CADR,EAYQ;AAAQ,IAAA,IAAI,EAAC,MAAb;AACI,IAAA,SAAS,EAAC,MADd;AAEI,IAAA,KAAK,EAAEJ,IAFX;AAGI,IAAA,QAAQ,EAAEU,gBAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAZR,CAAR;AAmBH;;AAID,eAAerB,UAAf","sourcesContent":["import React,{useState,useContext} from 'react';\nimport {AppContext} from '../../../../../../../../App';\nimport { Collapse } from 'reactstrap';\nimport {getPrefix} from '../../../../../../../../utils/prefixUtils';\n\nfunction QNameValue (props) {\n    \n    const {type,isOpen} = props;\n    const context = useContext(AppContext);\n\n    let initialPrefix = 'example';\n    if(type.prefix!=undefined){\n        initialPrefix = type.prefix.prefixValue;\n    }\n    const [prefix,setPrefix]=useState(initialPrefix);\n    const [name,setName]=useState(type.value);\n\n\n    const handlePrefixChange = function(e){\n        let prefixName = e.target.value;\n        let newPrefix = getPrefix(prefixName);\n        console.log(prefix)\n        type.setPrefix(newPrefix);\n        context.emit();\n        setPrefix(prefixName);\n    }\n\n    const handleNameChange = function(e){\n        let newName = e.target.value;\n        setName(newName);\n        type.setValue(newName);\n        context.emit();\n    }\n\n    return (<Collapse isOpen={isOpen} className='qnameSetCollapse'>\n                    <select className=\"customSelector\" value={prefix} onChange={handlePrefixChange}>\n                    <option value=\"example\">example</option>\n                        { \n                        context.prefixes.map((pre) =>{\n                            if(pre.prefixName!=''){\n                                return <option key={pre.id} value={pre.prefixValue}>{pre.prefixName}</option>\n                            }                        \n                        })\n                    }\n                    </select>\n                    \n                    <input  type=\"text\" \n                        className=\"name\"\n                        value={name}\n                        onChange={handleNameChange}\n                        />\n\n                </Collapse>);                          \n}\n\n\n\nexport default QNameValue;\n"]},"metadata":{},"sourceType":"module"}