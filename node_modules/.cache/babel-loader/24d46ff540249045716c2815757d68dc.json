{"ast":null,"code":"\"use strict\";\n\nvar $ = require(\"jquery\"),\n    rdfUtils = require('../utils/rdfUtils.js');\n\nvar API_ENDPOINT = 'https://www.wikidata.org/w/api.php/';\nvar QUERY = {\n  action: 'wbsearchentities',\n  language: (navigator.language || navigator.userLanguage).split(\"-\")[0],\n  continue: 0,\n  limit: 50,\n  format: 'json'\n};\n\nmodule.exports = function (yashe, name) {\n  return {\n    isValidCompletionPosition: function () {\n      return module.exports.isValidCompletionPosition(yashe);\n    },\n    get: function (token, callback) {\n      var possibleEntity = token.string.split(':')[1];\n      var prefix = token.string.split(':')[0];\n      var query = QUERY;\n      query.search = possibleEntity; //Add extra param if it is a property\n\n      if (rdfUtils.isWikidataPropertiesPrefix(yashe, prefix)) {\n        query.type = 'property';\n      } else {\n        delete query.type;\n      }\n\n      $.get({\n        url: API_ENDPOINT + '?' + $.param(query),\n        dataType: 'jsonp'\n      }).done(function (data) {\n        var list = []; //This condition is for an empty search\n\n        if (data.error) {\n          list = [{\n            text: '',\n            displayText: 'Type to search for an entity'\n          }];\n          callback(list);\n        } else {\n          var entities = [];\n          var label, id, description, entities;\n\n          for (var entity in data.search) {\n            label = data.search[entity].label;\n            id = data.search[entity].id;\n            description = data.search[entity].description;\n            list = {\n              text: id,\n              displayText: label + \" (\" + id + \") \\n \" + description\n            };\n            entities.push(list);\n          }\n\n          entities.sort();\n          callback(entities);\n        }\n      });\n    },\n    async: true,\n    bulk: false,\n    autoShow: false\n  };\n};\n\nmodule.exports.isValidCompletionPosition = function (yashe) {\n  var token = yashe.getCompleteToken();\n  var cur = yashe.getCursor(); //The cursor should stay at the end of the token\n\n  if (token.end != cur.ch) return false;\n  var prefixName = token.string.split(':')[0];\n  var previousToken = yashe.getPreviousNonWsToken(cur.line, token); //This line avoid the autocomplete in the prefix definition\n\n  if (previousToken.string.toUpperCase() == 'PREFIX') return false;\n\n  if (token.type == 'shape' || token.type == 'string-2' || token.type == 'constraint') {\n    if (rdfUtils.isWikidataEntitiesPrefix(yashe, prefixName) || rdfUtils.isWikidataPropertiesPrefix(yashe, prefixName)) {\n      return true;\n    }\n  }\n\n  return false;\n};","map":null,"metadata":{},"sourceType":"script"}