{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/wiki-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/ShapeRefComp.js\";\nimport React, { useState, useContext } from 'react';\nimport { AppContext } from '../../../../../../App';\nimport { Collapse } from 'reactstrap';\nimport shexUtils from '../../../../../../utils/shexUtils';\nimport Properties from '../../../../../../conf/properties';\n\nfunction ShapeRefComp(props) {\n  const triple = props.triple;\n  const context = useContext(AppContext);\n  const styles = Properties.getInstance().getShapeRefStyle();\n  let refValue = '';\n  let refOpen = false;\n\n  if (triple.shapeRef.shape != null) {\n    refValue = triple.shapeRef.shape.id;\n    refOpen = true;\n  }\n\n  const _useState = useState(refValue),\n        _useState2 = _slicedToArray(_useState, 2),\n        shapeRef = _useState2[0],\n        setShapeRef = _useState2[1];\n\n  const handleShapeRefChange = function (e) {\n    const shapeId = e.target.value;\n    let shapeRef = null;\n    let refSelector = '';\n\n    if (shapeId != '') {\n      shapeRef = shexUtils.getShapeById(context.shapes, shapeId);\n      refSelector = shapeRef.id;\n    }\n\n    triple.getShapeRef().setShape(shapeRef);\n\n    if (triple.constraint.value == 'none') {\n      triple.setConstraint('blankType');\n    }\n\n    if (shapeId == '' && triple.constraint.getTypeName() == 'blankType') {\n      triple.setConstraint('primitive');\n      triple.constraint.setValue('none');\n    }\n\n    context.emit();\n    setShapeRef(refSelector);\n  };\n\n  return React.createElement(\"div\", {\n    className: \"xs-gridBox\",\n    style: styles.body,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    className: \"customLabel\",\n    style: styles.label,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Shape \", React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, \"Reference\")), React.createElement(\"select\", {\n    className: \"shapeRefSelector\",\n    value: shapeRef,\n    onChange: handleShapeRefChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"none\"), context.shapes.map(shape => {\n    return React.createElement(\"option\", {\n      key: shape.id,\n      value: shape.id,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58\n      },\n      __self: this\n    }, '@' + shape.type);\n  })));\n}\n\nexport default ShapeRefComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/ShapeRefComp.js"],"names":["React","useState","useContext","AppContext","Collapse","shexUtils","Properties","ShapeRefComp","props","triple","context","styles","getInstance","getShapeRefStyle","refValue","refOpen","shapeRef","shape","id","setShapeRef","handleShapeRefChange","e","shapeId","target","value","refSelector","getShapeById","shapes","getShapeRef","setShape","constraint","setConstraint","getTypeName","setValue","emit","body","label","map","type"],"mappings":"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","sourcesContent":["import React,{useState,useContext} from 'react';\nimport {AppContext} from '../../../../../../App';\nimport { Collapse } from 'reactstrap';\nimport shexUtils from '../../../../../../utils/shexUtils';\nimport Properties from '../../../../../../conf/properties';\n\nfunction ShapeRefComp (props) {\n    \n    const {triple} = props;\n    const context = useContext(AppContext);\n    const styles = Properties.getInstance().getShapeRefStyle();\n\n    let refValue = '';\n    let refOpen = false;\n    if(triple.shapeRef.shape != null){\n        refValue = triple.shapeRef.shape.id;\n        refOpen = true;\n    }\n\n\n    const [shapeRef,setShapeRef] = useState(refValue);\n\n\n    const handleShapeRefChange = function(e){\n        const shapeId = e.target.value;\n        let shapeRef = null;\n        let refSelector = '';\n        if(shapeId!=''){\n            shapeRef = shexUtils.getShapeById(context.shapes,shapeId);\n            refSelector = shapeRef.id;\n        }\n        triple.getShapeRef().setShape(shapeRef);\n        if(triple.constraint.value=='none'){\n            triple.setConstraint('blankType');\n            \n        }\n        \n        if(shapeId=='' && triple.constraint.getTypeName() == 'blankType'){\n            triple.setConstraint('primitive');\n            triple.constraint.setValue('none');\n        }\n        \n      \n        context.emit();\n        setShapeRef(refSelector);\n    }\n     \n    return ( \n            <div className=\"xs-gridBox\" style={styles.body}>\n                    <label className=\"customLabel\" style={styles.label}>Shape <br/><span>Reference</span></label>\n                    <select className=\"shapeRefSelector\"\n                            value={shapeRef}\n                            onChange={handleShapeRefChange}>\n                    <option value=''>none</option>\n                \n                    { \n                    context.shapes.map(shape =>{\n                        return <option key={shape.id} value={shape.id}>{'@'+shape.type}</option>\n                        })\n                    }\n                    </select>  \n            </div>);                          \n}\n\n\n\nexport default ShapeRefComp;\n\n"]},"metadata":{},"sourceType":"module"}