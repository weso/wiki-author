{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport scrollIntoView from 'scroll-into-view-if-needed';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withContext } from '../core/Context';\nimport { getDisplayName, getMenuItemId, preventInputBlur } from '../utils';\nvar propTypes = {\n  option: PropTypes.oneOfType([PropTypes.object, PropTypes.string]).isRequired,\n  position: PropTypes.number\n};\n\nvar menuItemContainer = function menuItemContainer(Component) {\n  var WrappedMenuItem =\n  /*#__PURE__*/\n  function (_React$Component) {\n    _inheritsLoose(WrappedMenuItem, _React$Component);\n\n    function WrappedMenuItem() {\n      var _this;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n      _defineProperty(_assertThisInitialized(_this), \"itemRef\", React.createRef());\n\n      _defineProperty(_assertThisInitialized(_this), \"_handleClick\", function (e) {\n        var _this$props = _this.props,\n            onMenuItemClick = _this$props.onMenuItemClick,\n            option = _this$props.option,\n            onClick = _this$props.onClick;\n        onMenuItemClick(option, e);\n        onClick && onClick(e);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_maybeUpdateItem\", function () {\n        var _this$props2 = _this.props,\n            activeIndex = _this$props2.activeIndex,\n            onActiveItemChange = _this$props2.onActiveItemChange,\n            onInitialItemChange = _this$props2.onInitialItemChange,\n            option = _this$props2.option,\n            position = _this$props2.position;\n\n        if (position === 0) {\n          onInitialItemChange(option);\n        }\n\n        if (position === activeIndex) {\n          onActiveItemChange(option); // Automatically scroll the menu as the user keys through it.\n\n          var node = _this.itemRef.current;\n          node && scrollIntoView(node, {\n            block: 'nearest',\n            boundary: node.parentNode,\n            inline: 'nearest',\n            scrollMode: 'if-needed'\n          });\n        }\n      });\n\n      return _this;\n    }\n\n    var _proto = WrappedMenuItem.prototype;\n\n    _proto.componentDidMount = function componentDidMount() {\n      this._maybeUpdateItem();\n    };\n\n    _proto.componentDidUpdate = function componentDidUpdate(prevProps, prevState) {\n      this._maybeUpdateItem();\n    };\n\n    _proto.render = function render() {\n      var _this$props3 = this.props,\n          activeIndex = _this$props3.activeIndex,\n          id = _this$props3.id,\n          isOnlyResult = _this$props3.isOnlyResult,\n          label = _this$props3.label,\n          onActiveItemChange = _this$props3.onActiveItemChange,\n          onInitialItemChange = _this$props3.onInitialItemChange,\n          onMenuItemClick = _this$props3.onMenuItemClick,\n          option = _this$props3.option,\n          position = _this$props3.position,\n          setItem = _this$props3.setItem,\n          props = _objectWithoutPropertiesLoose(_this$props3, [\"activeIndex\", \"id\", \"isOnlyResult\", \"label\", \"onActiveItemChange\", \"onInitialItemChange\", \"onMenuItemClick\", \"option\", \"position\", \"setItem\"]);\n\n      var active = isOnlyResult || activeIndex === position; // Update the item's position in the item stack.\n\n      setItem(option);\n      return (\n        /*#__PURE__*/\n        React.createElement(Component, _extends({}, props, {\n          active: active,\n          \"aria-label\": label,\n          \"aria-selected\": active,\n          id: getMenuItemId(id, position),\n          onClick: this._handleClick,\n          onMouseDown: preventInputBlur,\n          ref: this.itemRef,\n          role: \"option\"\n        }))\n      );\n    };\n\n    return WrappedMenuItem;\n  }(React.Component);\n\n  _defineProperty(WrappedMenuItem, \"displayName\", \"menuItemContainer(\" + getDisplayName(Component) + \")\");\n\n  _defineProperty(WrappedMenuItem, \"propTypes\", propTypes);\n\n  return withContext(WrappedMenuItem, ['activeIndex', 'id', 'isOnlyResult', 'items', 'onActiveItemChange', 'onInitialItemChange', 'onMenuItemClick', 'setItem']);\n};\n\nexport default menuItemContainer;","map":null,"metadata":{},"sourceType":"module"}