{"ast":null,"code":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n(function (mod) {\n  if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n    mod(require(\"../../lib/codemirror\"));else if (typeof define == \"function\" && define.amd) // AMD\n    define([\"../../lib/codemirror\"], mod);else // Plain browser env\n    mod(CodeMirror);\n})(function (CodeMirror) {\n  \"use strict\";\n\n  CodeMirror.registerHelper(\"fold\", \"brace\", function (cm, start) {\n    var line = start.line,\n        lineText = cm.getLine(line);\n    var tokenType;\n\n    function findOpening(openCh) {\n      for (var at = start.ch, pass = 0;;) {\n        var found = at <= 0 ? -1 : lineText.lastIndexOf(openCh, at - 1);\n\n        if (found == -1) {\n          if (pass == 1) break;\n          pass = 1;\n          at = lineText.length;\n          continue;\n        }\n\n        if (pass == 1 && found < start.ch) break;\n        tokenType = cm.getTokenTypeAt(CodeMirror.Pos(line, found + 1));\n        if (!/^(comment|string)/.test(tokenType)) return found + 1;\n        at = found - 1;\n      }\n    }\n\n    var startToken = \"{\",\n        endToken = \"}\",\n        startCh = findOpening(\"{\");\n\n    if (startCh == null) {\n      startToken = \"[\", endToken = \"]\";\n      startCh = findOpening(\"[\");\n    }\n\n    if (startCh == null) return;\n    var count = 1,\n        lastLine = cm.lastLine(),\n        end,\n        endCh;\n\n    outer: for (var i = line; i <= lastLine; ++i) {\n      var text = cm.getLine(i),\n          pos = i == line ? startCh : 0;\n\n      for (;;) {\n        var nextOpen = text.indexOf(startToken, pos),\n            nextClose = text.indexOf(endToken, pos);\n        if (nextOpen < 0) nextOpen = text.length;\n        if (nextClose < 0) nextClose = text.length;\n        pos = Math.min(nextOpen, nextClose);\n        if (pos == text.length) break;\n\n        if (cm.getTokenTypeAt(CodeMirror.Pos(i, pos + 1)) == tokenType) {\n          if (pos == nextOpen) ++count;else if (! --count) {\n            end = i;\n            endCh = pos;\n            break outer;\n          }\n        }\n\n        ++pos;\n      }\n    }\n\n    if (end == null || line == end) return;\n    return {\n      from: CodeMirror.Pos(line, startCh),\n      to: CodeMirror.Pos(end, endCh)\n    };\n  });\n  CodeMirror.registerHelper(\"fold\", \"import\", function (cm, start) {\n    function hasImport(line) {\n      if (line < cm.firstLine() || line > cm.lastLine()) return null;\n      var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n      if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n      if (start.type != \"keyword\" || start.string != \"import\") return null; // Now find closing semicolon, return its position\n\n      for (var i = line, e = Math.min(cm.lastLine(), line + 10); i <= e; ++i) {\n        var text = cm.getLine(i),\n            semi = text.indexOf(\";\");\n        if (semi != -1) return {\n          startCh: start.end,\n          end: CodeMirror.Pos(i, semi)\n        };\n      }\n    }\n\n    var startLine = start.line,\n        has = hasImport(startLine),\n        prev;\n    if (!has || hasImport(startLine - 1) || (prev = hasImport(startLine - 2)) && prev.end.line == startLine - 1) return null;\n\n    for (var end = has.end;;) {\n      var next = hasImport(end.line + 1);\n      if (next == null) break;\n      end = next.end;\n    }\n\n    return {\n      from: cm.clipPos(CodeMirror.Pos(startLine, has.startCh + 1)),\n      to: end\n    };\n  });\n  CodeMirror.registerHelper(\"fold\", \"include\", function (cm, start) {\n    function hasInclude(line) {\n      if (line < cm.firstLine() || line > cm.lastLine()) return null;\n      var start = cm.getTokenAt(CodeMirror.Pos(line, 1));\n      if (!/\\S/.test(start.string)) start = cm.getTokenAt(CodeMirror.Pos(line, start.end + 1));\n      if (start.type == \"meta\" && start.string.slice(0, 8) == \"#include\") return start.start + 8;\n    }\n\n    var startLine = start.line,\n        has = hasInclude(startLine);\n    if (has == null || hasInclude(startLine - 1) != null) return null;\n\n    for (var end = startLine;;) {\n      var next = hasInclude(end + 1);\n      if (next == null) break;\n      ++end;\n    }\n\n    return {\n      from: CodeMirror.Pos(startLine, has + 1),\n      to: cm.clipPos(CodeMirror.Pos(end))\n    };\n  });\n});","map":null,"metadata":{},"sourceType":"script"}