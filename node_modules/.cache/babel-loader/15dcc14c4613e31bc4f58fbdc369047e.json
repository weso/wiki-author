{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\";\nimport _assertThisInitialized from \"@babel/runtime/helpers/assertThisInitialized\";\nimport _inheritsLoose from \"@babel/runtime/helpers/inheritsLoose\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport cx from 'classnames';\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport ClearButton from './ClearButton.react';\nimport tokenContainer from '../containers/tokenContainer';\nimport { isFunction } from '../utils';\nvar propTypes = {\n  active: PropTypes.bool,\n  disabled: PropTypes.bool,\n\n  /**\n   * Handler for removing/deleting the token. If not defined, the token will\n   * be rendered in a read-only state.\n   */\n  onRemove: PropTypes.func,\n\n  /**\n   * Explicitly force a read-only state on the token.\n   */\n  readOnly: PropTypes.bool,\n  tabIndex: PropTypes.number\n};\nvar defaultProps = {\n  active: false,\n  disabled: false,\n  tabIndex: 0\n};\n/**\n * Token\n *\n * Individual token component, generally displayed within the TokenizerInput\n * component, but can also be rendered on its own.\n */\n\nvar Token =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inheritsLoose(Token, _React$Component);\n\n  function Token() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderRemoveableToken\", function () {\n      var _this$props = _this.props,\n          active = _this$props.active,\n          children = _this$props.children,\n          className = _this$props.className,\n          onRemove = _this$props.onRemove,\n          props = _objectWithoutPropertiesLoose(_this$props, [\"active\", \"children\", \"className\", \"onRemove\"]);\n\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", _extends({}, props, {\n          className: cx('rbt-token', 'rbt-token-removeable', {\n            'rbt-token-active': active\n          }, className)\n        }), children,\n        /*#__PURE__*/\n        React.createElement(ClearButton, {\n          className: \"rbt-token-remove-button\",\n          label: \"Remove\",\n          onClick: onRemove,\n          tabIndex: -1\n        }))\n      );\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_renderToken\", function () {\n      var _this$props2 = _this.props,\n          children = _this$props2.children,\n          className = _this$props2.className,\n          disabled = _this$props2.disabled,\n          href = _this$props2.href;\n      var classnames = cx('rbt-token', {\n        'rbt-token-disabled': disabled\n      }, className);\n\n      if (href && !disabled) {\n        return (\n          /*#__PURE__*/\n          React.createElement(\"a\", {\n            className: classnames,\n            href: href\n          }, children)\n        );\n      }\n\n      return (\n        /*#__PURE__*/\n        React.createElement(\"div\", {\n          className: classnames\n        }, children)\n      );\n    });\n\n    return _this;\n  }\n\n  var _proto = Token.prototype;\n\n  _proto.render = function render() {\n    var _this$props3 = this.props,\n        disabled = _this$props3.disabled,\n        onRemove = _this$props3.onRemove,\n        readOnly = _this$props3.readOnly;\n    return !disabled && !readOnly && isFunction(onRemove) ? this._renderRemoveableToken() : this._renderToken();\n  };\n\n  return Token;\n}(React.Component);\n\n_defineProperty(Token, \"propTypes\", propTypes);\n\n_defineProperty(Token, \"defaultProps\", defaultProps);\n\nexport default tokenContainer(Token);","map":null,"metadata":{},"sourceType":"module"}