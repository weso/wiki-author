{"ast":null,"code":"import TypesFactory from './types/typesFactory';\nimport PrefixedIri from './types/concreteTypes/prefixedIri';\nimport BlankKind from './types/concreteTypes/kinds/blankKind';\nimport Prefix from './shexUtils/prefix';\n\nclass Shape {\n  constructor(id, type = new PrefixedIri(new Prefix('', 'http://example.org/')), triples = [], qualifier = new BlankKind()) {\n    this.id = id;\n    this.type = type;\n    this.triples = triples;\n    this.triplesCount = this.triples.length;\n    this.factory = new TypesFactory();\n    this.qualifier = qualifier;\n  }\n\n  addTriple(triple) {\n    this.triples.push(triple);\n    this.triplesCount++;\n  }\n\n  removeTriple(tripleId) {\n    this.triples = this.triples.filter(function (obj) {\n      return obj.id != tripleId;\n    });\n  }\n\n  setQualifier(qualifier) {\n    this.qualifier = this.qualifier;\n  }\n\n  setType(type) {\n    this.type = this.factory.createType(type);\n  }\n\n  toString() {\n    let str = '';\n\n    if (this.type.value != '') {\n      str += this.type + ' ' + this.qualifier;\n\n      if (this.checkContent()) {\n        str += ' {\\n';\n        str += this.getTriplesString();\n        str += \"}\\n\\n\";\n      }\n    }\n\n    return str;\n  }\n\n  getTriplesString() {\n    let str = '';\n    let longestTriple = this.getLongestElement('type');\n    let longestConstraint = this.getLongestElement('constraint');\n    let longestRef = this.getLongestElement('shapeRef');\n    let longestCard = this.getLongestElement('cardinality');\n    let longestCRef = this.getLongestCR(); //constraint+shapeRef\n\n    this.triples.forEach(triple => {\n      let tripleLength = triple.type.toString().length;\n      let constLength = triple.constraint.toString().length;\n      let refLength = triple.shapeRef.toString().length;\n      let cardLength = triple.cardinality.toString().length;\n      let CRefLength = constLength + refLength;\n      let tripleDiference = longestTriple - tripleLength;\n      let constDiference = longestConstraint - constLength;\n      let refDiference = longestRef - refLength;\n      let cardDiference = longestCard - cardLength;\n      let CRefDiference = longestCRef - CRefLength;\n      str += triple.toString(this.getSeparators(tripleDiference, constDiference, refDiference, cardDiference, CRefDiference));\n    });\n    return str;\n  } //Checks if there is any triple with content\n\n\n  checkContent() {\n    let isContent = false;\n    this.triples.forEach(triple => {\n      if (triple.getType().value != '') {\n        isContent = true;\n      }\n    });\n    return isContent;\n  }\n\n  getLongestElement(element) {\n    let size = 0;\n    this.triples.forEach(triple => {\n      let value = triple[element].toString().length;\n      if (value > size) size = value;\n    });\n    return size;\n  }\n  /**\n  * Get the longest Constraint+ShapeRef\n  * */\n\n\n  getLongestCR() {\n    let size = 0;\n    this.triples.forEach(triple => {\n      let cValue = triple.constraint.toString().length;\n      let rValue = triple.shapeRef.toString().length;\n      let value = cValue + rValue;\n      if (value > size) size = value;\n    });\n    return size;\n  }\n\n  getSeparators(tripleSize, constraintSize, refSize, cardSize, CRefSize) {\n    return {\n      triple: this.getSeparator(tripleSize),\n      constraint: this.getSeparator(constraintSize),\n      ref: this.getSeparator(refSize),\n      card: this.getSeparator(cardSize),\n      CRef: this.getSeparator(CRefSize)\n    };\n  }\n\n  getSeparator(size) {\n    let space = ' ';\n    let separator = ' ';\n\n    for (let i = 0; i < size; i++) {\n      separator += space;\n    }\n\n    return separator;\n  } //Getters and setters\n\n\n  getId() {\n    return this.id;\n  }\n\n  setId(id) {\n    this.id = id;\n  }\n\n  getType() {\n    return this.type;\n  }\n\n  getTriples() {\n    return this.triples;\n  }\n\n  setTriples(triples) {\n    this.triples = triples;\n  }\n\n  getTriplesCount() {\n    return this.triplesCount;\n  }\n\n  setTriplesCount(triplesCount) {\n    this.triplesCount = triplesCount;\n  }\n\n  getQualifier() {\n    return this.qualifier;\n  }\n\n  setQualifier(qualifier) {\n    this.qualifier = qualifier;\n  }\n\n}\n\nexport default Shape;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/entities/shexEntities/shape.js"],"names":["TypesFactory","PrefixedIri","BlankKind","Prefix","Shape","constructor","id","type","triples","qualifier","triplesCount","length","factory","addTriple","triple","push","removeTriple","tripleId","filter","obj","setQualifier","setType","createType","toString","str","value","checkContent","getTriplesString","longestTriple","getLongestElement","longestConstraint","longestRef","longestCard","longestCRef","getLongestCR","forEach","tripleLength","constLength","constraint","refLength","shapeRef","cardLength","cardinality","CRefLength","tripleDiference","constDiference","refDiference","cardDiference","CRefDiference","getSeparators","isContent","getType","element","size","cValue","rValue","tripleSize","constraintSize","refSize","cardSize","CRefSize","getSeparator","ref","card","CRef","space","separator","i","getId","setId","getTriples","setTriples","getTriplesCount","setTriplesCount","getQualifier"],"mappings":"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","sourcesContent":["import TypesFactory from './types/typesFactory';\n\nimport PrefixedIri from './types/concreteTypes/prefixedIri';\nimport BlankKind from './types/concreteTypes/kinds/blankKind';\nimport Prefix from './shexUtils/prefix';\n\nclass Shape {\n\n  constructor(id,type=new PrefixedIri(new Prefix('','http://example.org/')),triples = [],qualifier=new BlankKind()) {\n      this.id = id;\n      this.type = type;\n      this.triples = triples;\n      this.triplesCount = this.triples.length;\n      this.factory = new TypesFactory();\n      this.qualifier = qualifier;\n    }\n\n    addTriple(triple){\n        this.triples.push(triple);\n        this.triplesCount++;\n    }\n\n    removeTriple(tripleId){\n      this.triples = this.triples.filter(function( obj ) {\n        return obj.id != tripleId\n      });\n    }\n\n    setQualifier(qualifier){\n      this.qualifier = this.qualifier;\n    }\n    \n\n    setType(type){\n        this.type = this.factory.createType(type);\n     }\n\n \n    toString(){\n      let str='';\n      if(this.type.value!=''){\n        str+=this.type+' '+this.qualifier;\n        if(this.checkContent()){\n          str+=' {\\n';\n          str+= this.getTriplesString();\n          str+=\"}\\n\\n\"\n        }\n      }\n      return str\n     }\n\n     getTriplesString(){\n        let str='';\n        let longestTriple = this.getLongestElement('type');\n        let longestConstraint = this.getLongestElement('constraint');\n        let longestRef = this.getLongestElement('shapeRef');\n        let longestCard = this.getLongestElement('cardinality');\n        let longestCRef = this.getLongestCR();//constraint+shapeRef\n        this.triples.forEach(triple => {\n          let tripleLength = triple.type.toString().length;\n          let constLength = triple.constraint.toString().length;\n          let refLength = triple.shapeRef.toString().length;\n          let cardLength = triple.cardinality.toString().length;\n          let CRefLength = constLength + refLength;\n\n          let tripleDiference = longestTriple - tripleLength;\n          let constDiference = longestConstraint - constLength;\n          let refDiference = longestRef - refLength;\n          let cardDiference = longestCard - cardLength;\n          let CRefDiference = longestCRef - CRefLength;\n\n          str+=triple.toString( \n                      this.getSeparators(tripleDiference,\n                                          constDiference,\n                                          refDiference,\n                                          cardDiference,\n                                          CRefDiference));\n        });\n        return str;\n     }\n\n     //Checks if there is any triple with content\n     checkContent(){\n       let isContent = false;\n       this.triples.forEach(triple => {\n          if(triple.getType().value!=''){\n            isContent = true;\n          }\n        });\n        return isContent;\n     }\n\n\n    getLongestElement(element){\n      let size=0;\n      this.triples.forEach(triple => {\n          let value = triple[element].toString().length;\n          if(value>size)size = value;\n      });\n      return size;\n    }\n\n    /**\n    * Get the longest Constraint+ShapeRef\n    * */\n    getLongestCR(){\n      let size=0;\n      this.triples.forEach(triple => {\n          let cValue = triple.constraint.toString().length;\n          let rValue = triple.shapeRef.toString().length;\n          let value = cValue+rValue;\n          if(value>size)size = value;\n      });\n      return size;\n    }\n\n\n\n\n    getSeparators(tripleSize,constraintSize,refSize,cardSize,CRefSize){\n      return{\n        triple:this.getSeparator(tripleSize),\n        constraint:this.getSeparator(constraintSize),\n        ref:this.getSeparator(refSize),\n        card:this.getSeparator(cardSize),\n        CRef:this.getSeparator(CRefSize),\n      }\n    }\n\n    getSeparator(size){\n      let space = ' ';\n      let separator = ' ';\n      for(let i=0;i<size;i++){\n        separator+=space;\n      }\n      return separator;\n    }\n\n    //Getters and setters\n    getId(){\n      return this.id;\n    }\n\n    setId(id){\n      this.id=id;\n    }\n\n    getType(){\n      return this.type;\n    }\n\n    getTriples(){\n      return this.triples;\n    }\n\n    setTriples(triples){\n      this.triples = triples;\n    }\n\n    getTriplesCount(){\n      return this.triplesCount;\n    }\n\n    setTriplesCount(triplesCount){\n      this.triplesCount = triplesCount;\n    }\n\n    getQualifier(){\n      return this.qualifier;\n    }\n\n    setQualifier(qualifier){\n      this.qualifier = qualifier;\n    }\n\n  }\n\nexport default Shape;"]},"metadata":{},"sourceType":"module"}