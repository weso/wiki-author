{"ast":null,"code":"import _slicedToArray from \"/home/mistermboy/repositories/wiki-author/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/constraint/ValueSetComp.js\";\nimport React, { useState, useContext, useEffect } from 'react';\nimport { AppContext } from '../../../../../../../App';\nimport { Collapse } from 'reactstrap';\nimport QNameValue from './valueSetValues/QNameValue';\nimport InputValue from './valueSetValues/InputValue';\nimport NumberValue from './valueSetValues/NumberValue';\nimport BooleanValue from './valueSetValues/BooleanValue';\nimport Properties from '../../../../../../../conf/properties';\n\nfunction ValueSetComp(props) {\n  const valueSetValue = props.valueSetValue,\n        deleteValue = props.deleteValue;\n  const context = useContext(AppContext);\n  const styles = Properties.getInstance().getConstraintStyle();\n  const iriStr = '<...>';\n\n  const _useState = useState(valueSetValue.type.getTypeName()),\n        _useState2 = _slicedToArray(_useState, 2),\n        type = _useState2[0],\n        setType = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isIriRef = _useState4[0],\n        setIriRef = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isQName = _useState6[0],\n        setQName = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isString = _useState8[0],\n        setString = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isNumber = _useState10[0],\n        setNumber = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        isBoolean = _useState12[0],\n        setBoolean = _useState12[1];\n\n  const handleTypeChange = function (e) {\n    let newType = e.target.value;\n    setType(newType);\n    valueSetValue.setType(newType);\n    context.emit();\n    checkCollapses();\n  };\n\n  const checkCollapses = function () {\n    setIriRef(false);\n    setQName(false);\n    setString(false);\n    setNumber(false);\n    setBoolean(false);\n\n    if (type == 'iriRef') {\n      setIriRef(true);\n    }\n\n    if (type == 'prefixedIri') {\n      setQName(true);\n    }\n\n    if (type == 'stringLiteral') {\n      setString(true);\n    }\n\n    if (type == 'numberLiteral') {\n      setNumber(true);\n    }\n\n    if (type == 'booleanLiteral') {\n      setBoolean(true);\n    }\n  };\n\n  useEffect(() => {\n    checkCollapses();\n  });\n  return React.createElement(\"div\", {\n    className: \"valueSets\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"customSelector\",\n    value: type,\n    onChange: handleTypeChange,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"iriRef\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, iriStr), React.createElement(\"option\", {\n    value: \"prefixedIri\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  }, \"QName\"), React.createElement(\"option\", {\n    value: \"stringLiteral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, \"String\"), React.createElement(\"option\", {\n    value: \"numberLiteral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, \"Number\"), React.createElement(\"option\", {\n    value: \"booleanLiteral\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, \"Boolean\")), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(InputValue, {\n    type: valueSetValue.type,\n    isOpen: isIriRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }), React.createElement(QNameValue, {\n    type: valueSetValue.type,\n    isOpen: isQName,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }), React.createElement(InputValue, {\n    type: valueSetValue.type,\n    isOpen: isString,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }), React.createElement(NumberValue, {\n    type: valueSetValue.type,\n    isOpen: isNumber,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }), React.createElement(BooleanValue, {\n    type: valueSetValue.type,\n    isOpen: isBoolean,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    className: \"tripleBtns deleteValueSetBtn mdc-icon-button material-icons\",\n    style: styles.delete,\n    onClick: () => deleteValue(valueSetValue.id),\n    title: \"Delete Value\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"delete\"));\n}\n\nexport default ValueSetComp;","map":{"version":3,"sources":["/home/mistermboy/repositories/wiki-author/src/components/mainComps/assistant/tabs/shEx/customize/constraint/ValueSetComp.js"],"names":["React","useState","useContext","useEffect","AppContext","Collapse","QNameValue","InputValue","NumberValue","BooleanValue","Properties","ValueSetComp","props","valueSetValue","deleteValue","context","styles","getInstance","getConstraintStyle","iriStr","type","getTypeName","setType","isIriRef","setIriRef","isQName","setQName","isString","setString","isNumber","setNumber","isBoolean","setBoolean","handleTypeChange","e","newType","target","value","emit","checkCollapses","delete","id"],"mappings":";;AAAA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,UAAvB,EAAkCC,SAAlC,QAAkD,OAAlD;AACA,SAAQC,UAAR,QAAyB,0BAAzB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,WAAP,MAAwB,8BAAxB;AACA,OAAOC,YAAP,MAAyB,+BAAzB;AACA,OAAOC,UAAP,MAAuB,sCAAvB;;AAEA,SAASC,YAAT,CAAuBC,KAAvB,EAA8B;AAAA,QAEnBC,aAFmB,GAEUD,KAFV,CAEnBC,aAFmB;AAAA,QAELC,WAFK,GAEUF,KAFV,CAELE,WAFK;AAG1B,QAAMC,OAAO,GAAGb,UAAU,CAACE,UAAD,CAA1B;AACA,QAAMY,MAAM,GAAGN,UAAU,CAACO,WAAX,GAAyBC,kBAAzB,EAAf;AACA,QAAMC,MAAM,GAAG,OAAf;;AAL0B,oBAMLlB,QAAQ,CAACY,aAAa,CAACO,IAAd,CAAmBC,WAAnB,EAAD,CANH;AAAA;AAAA,QAMnBD,IANmB;AAAA,QAMdE,OANc;;AAAA,qBAOCrB,QAAQ,CAAC,IAAD,CAPT;AAAA;AAAA,QAOnBsB,QAPmB;AAAA,QAOVC,SAPU;;AAAA,qBAQDvB,QAAQ,CAAC,KAAD,CARP;AAAA;AAAA,QAQnBwB,OARmB;AAAA,QAQXC,QARW;;AAAA,qBASCzB,QAAQ,CAAC,KAAD,CATT;AAAA;AAAA,QASnB0B,QATmB;AAAA,QASVC,SATU;;AAAA,qBAUC3B,QAAQ,CAAC,KAAD,CAVT;AAAA;AAAA,QAUnB4B,QAVmB;AAAA,QAUVC,SAVU;;AAAA,sBAWG7B,QAAQ,CAAC,KAAD,CAXX;AAAA;AAAA,QAWnB8B,SAXmB;AAAA,QAWTC,UAXS;;AAa1B,QAAMC,gBAAgB,GAAG,UAASC,CAAT,EAAW;AAChC,QAAIC,OAAO,GAAGD,CAAC,CAACE,MAAF,CAASC,KAAvB;AACAf,IAAAA,OAAO,CAACa,OAAD,CAAP;AACAtB,IAAAA,aAAa,CAACS,OAAd,CAAsBa,OAAtB;AACApB,IAAAA,OAAO,CAACuB,IAAR;AACAC,IAAAA,cAAc;AACjB,GAND;;AAQA,QAAMA,cAAc,GAAG,YAAU;AAC7Bf,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,IAAAA,QAAQ,CAAC,KAAD,CAAR;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,IAAAA,SAAS,CAAC,KAAD,CAAT;AACAE,IAAAA,UAAU,CAAC,KAAD,CAAV;;AAGA,QAAGZ,IAAI,IAAE,QAAT,EAAkB;AACdI,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH;;AAED,QAAGJ,IAAI,IAAE,aAAT,EAAuB;AACnBM,MAAAA,QAAQ,CAAC,IAAD,CAAR;AACH;;AAED,QAAGN,IAAI,IAAE,eAAT,EAAyB;AACrBQ,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH;;AAED,QAAGR,IAAI,IAAE,eAAT,EAAyB;AACrBU,MAAAA,SAAS,CAAC,IAAD,CAAT;AACH;;AAED,QAAGV,IAAI,IAAE,gBAAT,EAA0B;AACtBY,MAAAA,UAAU,CAAC,IAAD,CAAV;AACH;AACJ,GA3BD;;AA8BA7B,EAAAA,SAAS,CAAC,MAAM;AACZoC,IAAAA,cAAc;AACjB,GAFQ,CAAT;AAMA,SAAU;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAQ,IAAA,SAAS,EAAC,gBAAlB;AACQ,IAAA,KAAK,EAAEnB,IADf;AAEQ,IAAA,QAAQ,EAAEa,gBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI;AAAQ,IAAA,KAAK,EAAC,QAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAwBd,MAAxB,CAHJ,EAII;AAAQ,IAAA,KAAK,EAAC,aAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAJJ,EAKI;AAAQ,IAAA,KAAK,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,EAMI;AAAQ,IAAA,KAAK,EAAC,eAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cANJ,EAOI;AAAQ,IAAA,KAAK,EAAC,gBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAPJ,CADF,EAWE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEN,aAAa,CAACO,IAAhC;AAAsC,IAAA,MAAM,EAAEG,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAGI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEV,aAAa,CAACO,IAAhC;AAAsC,IAAA,MAAM,EAAEK,OAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHJ,EAKI,oBAAC,UAAD;AAAY,IAAA,IAAI,EAAEZ,aAAa,CAACO,IAAhC;AAAsC,IAAA,MAAM,EAAEO,QAA9C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,EAOI,oBAAC,WAAD;AAAa,IAAA,IAAI,EAAEd,aAAa,CAACO,IAAjC;AAAuC,IAAA,MAAM,EAAES,QAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,EASI,oBAAC,YAAD;AAAc,IAAA,IAAI,EAAEhB,aAAa,CAACO,IAAlC;AAAwC,IAAA,MAAM,EAAEW,SAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATJ,CAXF,EAuBE;AAAQ,IAAA,SAAS,EAAC,6DAAlB;AACI,IAAA,KAAK,EAAEf,MAAM,CAACwB,MADlB;AAEI,IAAA,OAAO,EAAE,MAAI1B,WAAW,CAACD,aAAa,CAAC4B,EAAf,CAF5B;AAGI,IAAA,KAAK,EAAC,cAHV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBF,CAAV;AA8BH;;AAID,eAAe9B,YAAf","sourcesContent":["import React,{useState,useContext,useEffect} from 'react';\nimport {AppContext} from '../../../../../../../App';\nimport { Collapse } from 'reactstrap';\nimport QNameValue from './valueSetValues/QNameValue';\nimport InputValue from './valueSetValues/InputValue';\nimport NumberValue from './valueSetValues/NumberValue';\nimport BooleanValue from './valueSetValues/BooleanValue';\nimport Properties from '../../../../../../../conf/properties';\n\nfunction ValueSetComp (props) {\n    \n    const {valueSetValue,deleteValue} = props;\n    const context = useContext(AppContext);\n    const styles = Properties.getInstance().getConstraintStyle();\n    const iriStr = '<...>';\n    const [type,setType]=useState(valueSetValue.type.getTypeName());\n    const [isIriRef,setIriRef]=useState(true);\n    const [isQName,setQName]=useState(false);\n    const [isString,setString]=useState(false);\n    const [isNumber,setNumber]=useState(false);\n    const [isBoolean,setBoolean]=useState(false);\n\n    const handleTypeChange = function(e){\n        let newType = e.target.value;\n        setType(newType);\n        valueSetValue.setType(newType);\n        context.emit();\n        checkCollapses();\n    }\n\n    const checkCollapses = function(){\n        setIriRef(false);\n        setQName(false);\n        setString(false);\n        setNumber(false);\n        setBoolean(false);\n        \n\n        if(type=='iriRef'){\n            setIriRef(true);\n        }\n\n        if(type=='prefixedIri'){\n            setQName(true);\n        }\n\n        if(type=='stringLiteral'){\n            setString(true);\n        }\n\n        if(type=='numberLiteral'){\n            setNumber(true);\n        }\n\n        if(type=='booleanLiteral'){\n            setBoolean(true);\n        }\n    }\n\n\n    useEffect(() => {\n        checkCollapses();\n    });\n    \n\n\n    return (  <div className=\"valueSets\">\n                <select className=\"customSelector\"\n                        value={type}\n                        onChange={handleTypeChange}>\n                    <option value=\"iriRef\">{iriStr}</option>\n                    <option value=\"prefixedIri\">QName</option>\n                    <option value=\"stringLiteral\">String</option>\n                    <option value=\"numberLiteral\">Number</option>\n                    <option value=\"booleanLiteral\">Boolean</option>\n                </select>\n\n                <div>\n                    <InputValue type={valueSetValue.type} isOpen={isIriRef}/>\n\n                    <QNameValue type={valueSetValue.type} isOpen={isQName}/>\n\n                    <InputValue type={valueSetValue.type} isOpen={isString}/>\n\n                    <NumberValue type={valueSetValue.type} isOpen={isNumber}/>\n\n                    <BooleanValue type={valueSetValue.type} isOpen={isBoolean}/>\n                </div>\n                \n                <button className=\"tripleBtns deleteValueSetBtn mdc-icon-button material-icons\" \n                    style={styles.delete}\n                    onClick={()=>deleteValue(valueSetValue.id)}\n                    title=\"Delete Value\">\n                    delete\n                </button>\n            </div> );                          \n}\n\n\n\nexport default ValueSetComp;\n"]},"metadata":{},"sourceType":"module"}